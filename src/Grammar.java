/* Generated By:JJTree&JavaCC: Do not edit this line. Grammar.java */
import java.util.HashMap;
import java.lang.*;
import java.util.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileNotFoundException;

import java.util.Map.Entry;

public class Grammar/*@bgen(jjtree)*/implements GrammarTreeConstants, GrammarConstants {/*@bgen(jjtree)*/
  protected static JJTGrammarState jjtree = new JJTGrammarState();/*local vars-> params function-> global vars*/
  private static HashMap < String, Object > localVars = new HashMap < String, Object > ();
  private static HashMap < String, Object > funcParams = new HashMap < String, Object > ();
  private static HashMap < String, Object > globalVars = new HashMap < String, Object > ();

  private static HashMap < String, Object > funcReturn = new HashMap < String, Object > ();
  private static HashMap < String, String > functions = new HashMap < String, String > ();

  private static ArrayList < String > order = new ArrayList < String > ();
  private static ArrayList < String > tempFuncParamsType = new ArrayList < String > ();
  private static ArrayList <String > tempExprType=new ArrayList <String > ();

  private static String globalSignal, filename,errorMessage = "",indexArray="null";
  private static Boolean globalVar = false, funcParam = false, localVar = false, error = false,expr=false,stm=true,arraySize=false,size=false,arrayAccess=false;
  private static int localType = - 1, nArgs=0,aSize=-1;

  private static File teste;

  public static void main(String args []) throws FileNotFoundException
  {
    File f1 = new File("examples/teste.txt");
    if (f1.exists())
    {
      FileInputStream s1 = new FileInputStream(f1);
      System.out.println("Reading file...");
    }
    else System.out.println("File not found.");
    try
    {
      BufferedReader stream = new BufferedReader(new FileReader(f1));
      Grammar myYal = new Grammar(stream);
      SimpleNode root = myYal.Module();
      root.dump("");
      /* TESTING
      for (int i=0; i < order.size(); i++)
      	System.out.println("ORDER: "+order.get(i));

      System.out.println("ISTO: " + globalVars.get("g").getSize());
      System.out.println("ISTO: " + globalVars.get("g").getValue());      System.out.println("ISTO: " + globalVars.get("g").getType());
      
	  System.out.println("ISTO: " + globalVars.get("h").getSize());
      System.out.println("ISTO: " + globalVars.get("h").getValue());
      System.out.println("ISTO: " + globalVars.get("h").getType());

      System.out.println("ISTO: " + globalVars.get("b").getSize());
      System.out.println("ISTO: " + globalVars.get("b").getValue());
      System.out.println("ISTO: " + globalVars.get("b").getType());
      
      System.out.println("ISTO: " + globalVars.get("a").getSize());
      System.out.println("ISTO: " + globalVars.get("a").getValue());
      System.out.println("ISTO: " + globalVars.get("a").getType());
      
      System.out.println("ISTO: " + globalVars.get("c").getSize());
      System.out.println("ISTO: " + globalVars.get("c").getValue());
      System.out.println("ISTO: " + globalVars.get("c").getType());
      
      System.out.println("ISTO: " + globalVars.get("ab").getSize());
      System.out.println("ISTO: " + globalVars.get("ab").getValue());
      System.out.println("ISTO: " + globalVars.get("ab").getType());
*/
      System.out.println("ISTO: " + globalVars.get("a").getSize());
      System.out.println("ISTO: " + globalVars.get("a").getValue());
      System.out.println("ISTO: " + globalVars.get("a").getType());
      System.out.println("ISTO: " + globalVars.get("a").getArray().get(6));


      System.out.println("Accepted. " + myYal.eval(root));
      /*JVCgenerator g1 = new JVCgenerator("teste");      g1.addModule("nomeModulo");      g1.addVar("variavel", "2");      g1.closeWriter();*/
    }
    catch (Exception e)
    {
      System.out.println("Error!");
      System.out.println("MESSAGE: " + e.getMessage());
    }
  }
  int eval(SimpleNode node)
  {
    if (node.jjtGetNumChildren() == 0)  // leaf node with integer value
    return node.val;
    else if (node.jjtGetNumChildren() == 1)  // only one child
    return this.eval((SimpleNode) node.jjtGetChild(0));
    SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
    SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
    switch (node.id)
    {
      case GrammarTreeConstants.JJTMODULE :
      //PORQUE? TODO
      System.out.println(".class public ");
      break;
      default : // abort
      System.out.println("Operador ilegal!");
      System.exit(1);
    }
    return 0;
  }

  static final public SimpleNode Module() throws ParseException {
 /*@bgen(jjtree) Module */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(MODULE);
      t1 = jj_consume_token(ID);
    SimpleNode jjtn001 = new SimpleNode(JJTID);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.module = (String) t1.image;
    System.out.println("MODULE: " + t1.image);
    globalVar = true;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      jj_consume_token(LCHAVETA);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
                  SimpleNode jjtn002 = new SimpleNode(JJTDECLARATION);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
          Declaration();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
        }
      }
      label_2:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_2;
        }
    SimpleNode jjtn003 = new SimpleNode(JJTFUNCTION);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
        try {
          Function();
        } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
        } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
        }
      }
      jj_consume_token(RCHAVETA);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Declaration() throws ParseException {
  Token t1, t2;
  arraySize=false;
    if (jj_2_3(3)) {
                   SimpleNode jjtn001 = new SimpleNode(JJTARRAYACCESS);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
        ArrayAccess();
      } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
      }
    } else if (jj_2_4(2)) {
      SimpleNode jjtn002 = new SimpleNode(JJTARRAY);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        ArrayElement();
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    } else if (jj_2_5(2)) {
      SimpleNode jjtn003 = new SimpleNode(JJTSCALAR);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        ScalarElement();
      } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_10(2)) {
      jj_consume_token(ASSIGN);
      if (jj_2_7(2)) {
        jj_consume_token(31);
        SimpleNode jjtn004 = new SimpleNode(JJTARRAYSIZE);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
        try {
          ArraySize();
        } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte004;}
        }
        if (jjte004 instanceof ParseException) {
          {if (true) throw (ParseException)jjte004;}
        }
        {if (true) throw (Error)jjte004;}
        } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
        }
        jj_consume_token(32);
      } else if (jj_2_8(2)) {
        if (jj_2_6(2)) {
          t1 = jj_consume_token(ADDSUB_OP);
        SimpleNode jjtn005 = new SimpleNode(JJTADDSUBOP);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
          try {
        jjtree.closeNodeScope(jjtn005, true);
        jjtc005 = false;
        if (globalVar == true)
        {
          String lastGlobal = order.get(order.size() - 1);
          Object ob1 = globalVars.get(lastGlobal);
          ob1.setOperator((String) t1.image);
          globalVars.put(lastGlobal, ob1);
        }
        System.out.println("operator: " + (String) t1.image);
        // jjtThis.val2 = (String) t1.image; globalSignal = (String) t1.image;

          } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
        }
          }
        } else {
          ;
        }
        t2 = jj_consume_token(INTEGER);
        SimpleNode jjtn006 = new SimpleNode(JJTINTVALUE);
        boolean jjtc006 = true;
        jjtree.openNodeScope(jjtn006);
        try {
        jjtree.closeNodeScope(jjtn006, true);
        jjtc006 = false;
        if (globalVar == true)
        {
          String lastGlobal = order.get(order.size() - 1);
          Object ob1 = globalVars.get(lastGlobal);
          if (!ob1.getSize().equals("null") && ob1.getType().equals("array"))
          {
            if (!indexArray.equals("null"))
            {
                ob1.setIndexValue(indexArray,(String) t2.image);
            }else
            {


            if (ob1.getOperator().equals("-"))
            ob1.setValue("-" + (String) t2.image);
            else ob1.setValue((String) t2.image);
            globalVars.put(lastGlobal, ob1);
          }
          }
          else if (ob1.getSize().equals("null") && ob1.getType().equals("array"))
          {
                ob1.setType("scalar");
            if (ob1.getOperator().equals("-"))
            ob1.setValue("-" + (String) t2.image);
            else ob1.setValue((String) t2.image);
            globalVars.put(lastGlobal, ob1);
          }
          else
          {
            if (ob1.getOperator().equals("-"))
            ob1.setValue("-" + (String) t2.image);
            else ob1.setValue((String) t2.image);
            globalVars.put(lastGlobal, ob1);
          }
        }
        System.out.println("Value: " + Integer.parseInt((String) t2.image));
        /*jjtThis.valorInicial = Integer.parseInt(globalSignal + (String) t2.image)*/        ;
        } finally {
        if (jjtc006) {
          jjtree.closeNodeScope(jjtn006, true);
        }
        }
      } else if (jj_2_9(2)) {
        SimpleNode jjtn007 = new SimpleNode(JJTSCALARACCESS);
        boolean jjtc007 = true;
        jjtree.openNodeScope(jjtn007);
        try {
          ScalarAccess();
        } catch (Throwable jjte007) {
        if (jjtc007) {
          jjtree.clearNodeScope(jjtn007);
          jjtc007 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte007 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte007;}
        }
        if (jjte007 instanceof ParseException) {
          {if (true) throw (ParseException)jjte007;}
        }
        {if (true) throw (Error)jjte007;}
        } finally {
        if (jjtc007) {
          jjtree.closeNodeScope(jjtn007, true);
        }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    jj_consume_token(PVIRG);
  }

  static final public void Function() throws ParseException {
 /*@bgen(jjtree) function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t1;
    try {
    globalVar = false;
      if (jj_2_13(3)) {
        jj_consume_token(FUNCTION);
          SimpleNode jjtn001 = new SimpleNode(JJTFUNCRETURN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          functionReturn();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        jj_consume_token(ASSIGN);
        t1 = jj_consume_token(ID);
        if (!functions.containsKey((String) t1.image))
        {
          String lastReturn = order.get(order.size() - 1);
          String returnName = funcReturn.get(lastReturn).getName();
          functions.put((String) t1.image, returnName);
          order.add((String) t1.image);
        }
        else
        {
          error = true;
          errorMessage = "Functions with same name: " + (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);
        }
        System.out.println("func assign id: " + (String) t1.image);
        jj_consume_token(LPAR);
        if (jj_2_11(2)) {
          SimpleNode jjtn002 = new SimpleNode(JJTVARLIST);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          try {
            Varlist();
          } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
          } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
          }
        } else {
          ;
        }
        jj_consume_token(RPAR);
      } else if (jj_2_14(2)) {
        jj_consume_token(FUNCTION);
        t1 = jj_consume_token(ID);
        if (!functions.containsKey((String) t1.image))
        {
          String lastReturn = order.get(order.size() - 1);
          functions.put((String) t1.image, "null");
          order.add((String) t1.image);
        }
        else
        {
          error = true;
          errorMessage = "Functions with same name: " + (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);
        }
        System.out.println("func id: " + (String) t1.image);
        jj_consume_token(LPAR);
        if (jj_2_12(2)) {
          SimpleNode jjtn003 = new SimpleNode(JJTVARLIST);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          try {
            Varlist();
          } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
          } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
          }
        } else {
          ;
        }
        jj_consume_token(RPAR);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    funcParam = false;
      jj_consume_token(LCHAVETA);
                 SimpleNode jjtn004 = new SimpleNode(JJTSTMTLST);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
      try {
        Stmtlst();
      } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte004;}
                 }
                 if (jjte004 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte004;}
                 }
                 {if (true) throw (Error)jjte004;}
      } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004, true);
                 }
      }
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void functionReturn() throws ParseException {
  Token t1;
    t1 = jj_consume_token(ID);
      SimpleNode jjtn001 = new SimpleNode(JJTID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      System.out.println("Func return id: " + (String) t1.image);
      //jjtThis.nameF = (String) t1.image; name_f1 = (String) t1.image;
      if (!funcReturn.containsKey((String) t1.image))
      {
        Object ob1 = new Object((String) t1.image, "scalar", "null");
        funcReturn.put((String) t1.image, ob1);
        order.add((String) t1.image);
      }
      else
      {
        error = true;
        errorMessage = "Function: Return var with same id: " + (String) t1.image;
        System.out.println("ERROR: " + errorMessage);
        System.exit(1);
      }
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
    if (jj_2_15(2)) {
      jj_consume_token(31);
      jj_consume_token(32);
      String lastReturn = order.get(order.size() - 1);
      Object ob1 = funcReturn.get(lastReturn);
      ob1.setType("array");
      funcReturn.put(lastReturn, ob1);
      System.out.println("Func return type: ARRAY");
    } else {
      ;
    }
  }

  static final public void Varlist() throws ParseException {
    funcParam = true;
    if (jj_2_16(2)) {
      SimpleNode jjtn001 = new SimpleNode(JJTARRAY);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        ArrayElement();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_17(2)) {
      SimpleNode jjtn002 = new SimpleNode(JJTSCALAR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        ScalarElement();
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(VIRG);
      if (jj_2_19(2)) {
      SimpleNode jjtn003 = new SimpleNode(JJTARRAY);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
        try {
          ArrayElement();
        } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
        } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
        }
      } else if (jj_2_20(2)) {
      SimpleNode jjtn004 = new SimpleNode(JJTSCALAR);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
        try {
          ScalarElement();
        } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte004;}
      }
      if (jjte004 instanceof ParseException) {
        {if (true) throw (ParseException)jjte004;}
      }
      {if (true) throw (Error)jjte004;}
        } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ArrayElement() throws ParseException {
  Token t1;
    t1 = jj_consume_token(ID);
      SimpleNode jjtn001 = new SimpleNode(JJTID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      if (globalVar == true)
      {
        if (!globalVars.containsKey((String) t1.image))
        {
          Object ob1 = new Object((String) t1.image, "array", "null");
          globalVars.put((String) t1.image, ob1);
          order.add((String) t1.image);
        }
        else
        {
          error = true;
          errorMessage = "Array: Global var with same name: " + (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);
        }
      }
      else if (funcParam == true)
      {
        String lastFunc = order.get(order.size() - 1);
        if (!funcParams.containsKey(lastFunc + " " + (String) t1.image))
        {
          Object ob1 = new Object((String) t1.image, "array", "null");
          funcParams.put(lastFunc + " " + (String) t1.image, ob1);
          System.out.println("Array: Func param id: " + (String) t1.image);
          //order.add((String) t1.image);
        }
        else
        {
          error = true;
          errorMessage = "Array: Function param with same name: " + (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);
        }
      }
      System.out.println("array id: " + (String) t1.image);
      //jjtThis.globalVar = (String) t1.image; declaration = (String) t1.image;

    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
    jj_consume_token(31);
    jj_consume_token(32);
  }

  static final public void ScalarElement() throws ParseException {
  Token t1;
    t1 = jj_consume_token(ID);
      SimpleNode jjtn001 = new SimpleNode(JJTID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      if (globalVar == true)
      {
        if (!globalVars.containsKey((String) t1.image))
        {
          Object ob1 = new Object((String) t1.image, "scalar", "null");
          globalVars.put((String) t1.image, ob1);
          order.add((String) t1.image);
        }
        else
        {
          Object ob1 = globalVars.get((String) t1.image);
        /*  if (ob1.getType().equals("scalar"))
          {
            error = true;
            errorMessage = "Scalar: Global var with same name: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }*/

          order.add((String) t1.image);
        }
      }
      if (funcParam == true)
      {
        String lastFunc = order.get(order.size() - 1);
        if (!funcParams.containsKey(lastFunc + " " + (String) t1.image))
        {
          Object ob1 = new Object((String) t1.image, "scalar", "null");
          funcParams.put(lastFunc + " " + (String) t1.image, ob1);
          System.out.println("Scalar: Func param id: " + (String) t1.image);
          //order.add((String) t1.image);
        }
        else
        {
          error = true;
          errorMessage = "Scalar: Function param with same name: " + (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);
        }
      }
      System.out.println("Scalar id: " + (String) t1.image);
      //jjtThis.globalVar = (String) t1.image; declaration = (String) t1.image;

    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
  }

  static final public void Stmtlst() throws ParseException {
    expr=false;
    label_4:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_4;
      }
      SimpleNode jjtn001 = new SimpleNode(JJTSTMT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        Stmt();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    }
  }

  static final public void Stmt() throws ParseException {
    if (jj_2_22(2)) {
        stm=true;
    SimpleNode jjtn001 = new SimpleNode(JJTWHILE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        While();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else if (jj_2_23(2)) {
    SimpleNode jjtn002 = new SimpleNode(JJTIF);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        If();
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    } else if (jj_2_24(3)) {
    SimpleNode jjtn003 = new SimpleNode(JJTASSIGN);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        Assign();
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
    } else if (jj_2_25(2)) {
    SimpleNode jjtn004 = new SimpleNode(JJTCALL);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
      try {
        Call();
      } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
      } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
      }
      jj_consume_token(PVIRG);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Assign() throws ParseException {
 /*@bgen(jjtree) assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
    localVar=true;
    SimpleNode jjtn001 = new SimpleNode(JJTLHS);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        Lhs();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      jj_consume_token(ASSIGN);
                          SimpleNode jjtn002 = new SimpleNode(JJTRHS);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
      try {
        Rhs();
      } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
      } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
      }
      jj_consume_token(PVIRG);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Lhs() throws ParseException {
    if (jj_2_26(2)) {
      SimpleNode jjtn001 = new SimpleNode(JJTARRAYACCESS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        ArrayAccess();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_27(2)) {
      SimpleNode jjtn002 = new SimpleNode(JJTSCALARACCESS);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        ScalarAccess();
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Rhs() throws ParseException {
  Token t1;
    if (jj_2_32(2)) {
       SimpleNode jjtn001 = new SimpleNode(JJTTERM);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
      try {
        Term();
      } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte001;}
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       {if (true) throw (Error)jjte001;}
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
      }
      if (jj_2_31(2)) {
        if (jj_2_28(2)) {
         SimpleNode jjtn002 = new SimpleNode(JJTARITHOP);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
          try {
            t1 = jj_consume_token(ARITH_OP);
          } finally {
         if (jjtc002) {
           jjtree.closeNodeScope(jjtn002, true);
         }
          }
        } else if (jj_2_29(2)) {
          SimpleNode jjtn003 = new SimpleNode(JJTBITWISEOP);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          try {
            t1 = jj_consume_token(BITWISE_OP);
          } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
          }
        } else if (jj_2_30(2)) {
          SimpleNode jjtn004 = new SimpleNode(JJTADDSUBOP);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
          try {
            t1 = jj_consume_token(ADDSUB_OP);
          } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
         SimpleNode jjtn005 = new SimpleNode(JJTTERM);
         boolean jjtc005 = true;
         jjtree.openNodeScope(jjtn005);
        try {
          Term();
        } catch (Throwable jjte005) {
         if (jjtc005) {
           jjtree.clearNodeScope(jjtn005);
           jjtc005 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte005 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte005;}
         }
         if (jjte005 instanceof ParseException) {
           {if (true) throw (ParseException)jjte005;}
         }
         {if (true) throw (Error)jjte005;}
        } finally {
         if (jjtc005) {
           jjtree.closeNodeScope(jjtn005, true);
         }
        }
      } else {
        ;
      }
    } else if (jj_2_33(2)) {
      jj_consume_token(31);
           SimpleNode jjtn006 = new SimpleNode(JJTARRAYSIZE);
           boolean jjtc006 = true;
           jjtree.openNodeScope(jjtn006);
      try {
        ArraySize();
      } catch (Throwable jjte006) {
           if (jjtc006) {
             jjtree.clearNodeScope(jjtn006);
             jjtc006 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte006 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte006;}
           }
           if (jjte006 instanceof ParseException) {
             {if (true) throw (ParseException)jjte006;}
           }
           {if (true) throw (Error)jjte006;}
      } finally {
           if (jjtc006) {
             jjtree.closeNodeScope(jjtn006, true);
           }
      }
      jj_consume_token(32);
  if (expr == true)
  {
    tempExprType.add("array");
  }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ArraySize() throws ParseException {
 /*@bgen(jjtree) ArraySize */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t1;
    try {
    arraySize=true;

    if (arrayAccess == true)
        {if (true) return;}
      if (jj_2_34(2)) {
        SimpleNode jjtn001 = new SimpleNode(JJTSCALARACCESS);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          ScalarAccess();
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
        }
      } else if (jj_2_35(2)) {
        t1 = jj_consume_token(INTEGER);
      SimpleNode jjtn002 = new SimpleNode(JJTINT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      if (globalVar == true)
      {
        String lastGlobal = order.get(order.size() - 1);
        Object ob1 = globalVars.get(lastGlobal);
        ob1.setSize((String) t1.image);
        ob1.setType("array");
        globalVars.put(lastGlobal, ob1);
      }
      System.out.println("array size: " + (String) t1.image);
      /*jjtThis.arraysize = Integer.parseInt((String)t1.image);*/

        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Term() throws ParseException {
  Token t1, t2;
    if (jj_2_36(2)) {
     SimpleNode jjtn001 = new SimpleNode(JJTADDSUBOP);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        t1 = jj_consume_token(ADDSUB_OP);
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
    } else {
      ;
    }
    if (jj_2_37(2)) {
      SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        t2 = jj_consume_token(INTEGER);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    if (expr == true)
    {
                tempExprType.add("scalar");
    }
    } else if (jj_2_38(3)) {
                   SimpleNode jjtn003 = new SimpleNode(JJTCALL);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
      try {
        Call();
      } catch (Throwable jjte003) {
                   if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte003;}
                   }
                   if (jjte003 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte003;}
                   }
                   {if (true) throw (Error)jjte003;}
      } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
      }
    } else if (jj_2_39(2)) {
     SimpleNode jjtn004 = new SimpleNode(JJTARRAYACCESS);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
      try {
        ArrayAccess();
      } catch (Throwable jjte004) {
     if (jjtc004) {
       jjtree.clearNodeScope(jjtn004);
       jjtc004 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte004 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte004;}
     }
     if (jjte004 instanceof ParseException) {
       {if (true) throw (ParseException)jjte004;}
     }
     {if (true) throw (Error)jjte004;}
      } finally {
     if (jjtc004) {
       jjtree.closeNodeScope(jjtn004, true);
     }
      }
    } else if (jj_2_40(2)) {
     SimpleNode jjtn005 = new SimpleNode(JJTSCALARACCESS);
     boolean jjtc005 = true;
     jjtree.openNodeScope(jjtn005);
      try {
        ScalarAccess();
      } catch (Throwable jjte005) {
     if (jjtc005) {
       jjtree.clearNodeScope(jjtn005);
       jjtc005 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte005 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte005;}
     }
     if (jjte005 instanceof ParseException) {
       {if (true) throw (ParseException)jjte005;}
     }
     {if (true) throw (Error)jjte005;}
      } finally {
     if (jjtc005) {
       jjtree.closeNodeScope(jjtn005, true);
     }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void While() throws ParseException {
 /*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
    localType = 0;
    SimpleNode jjtn001 = new SimpleNode(JJTWHILE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(WHILE);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
                     SimpleNode jjtn002 = new SimpleNode(JJTEXPRTEST);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
      try {
        Exprtest();
      } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
      } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
      }
      jj_consume_token(LCHAVETA);
                                                       SimpleNode jjtn003 = new SimpleNode(JJTSTMTLST);
                                                       boolean jjtc003 = true;
                                                       jjtree.openNodeScope(jjtn003);
      try {
        Stmtlst();
      } catch (Throwable jjte003) {
                                                       if (jjtc003) {
                                                         jjtree.clearNodeScope(jjtn003);
                                                         jjtc003 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte003 instanceof RuntimeException) {
                                                         {if (true) throw (RuntimeException)jjte003;}
                                                       }
                                                       if (jjte003 instanceof ParseException) {
                                                         {if (true) throw (ParseException)jjte003;}
                                                       }
                                                       {if (true) throw (Error)jjte003;}
      } finally {
                                                       if (jjtc003) {
                                                         jjtree.closeNodeScope(jjtn003, true);
                                                       }
      }
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void If() throws ParseException {
 /*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
    localType = 0;
    SimpleNode jjtn001 = new SimpleNode(JJTIF);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(IF);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
               SimpleNode jjtn002 = new SimpleNode(JJTEXPRTEST);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
      try {
        Exprtest();
      } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte002;}
               }
               if (jjte002 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte002;}
               }
               {if (true) throw (Error)jjte002;}
      } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
               }
      }
      jj_consume_token(LCHAVETA);
                                                 SimpleNode jjtn003 = new SimpleNode(JJTSTMTLST);
                                                 boolean jjtc003 = true;
                                                 jjtree.openNodeScope(jjtn003);
      try {
        Stmtlst();
      } catch (Throwable jjte003) {
                                                 if (jjtc003) {
                                                   jjtree.clearNodeScope(jjtn003);
                                                   jjtc003 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte003 instanceof RuntimeException) {
                                                   {if (true) throw (RuntimeException)jjte003;}
                                                 }
                                                 if (jjte003 instanceof ParseException) {
                                                   {if (true) throw (ParseException)jjte003;}
                                                 }
                                                 {if (true) throw (Error)jjte003;}
      } finally {
                                                 if (jjtc003) {
                                                   jjtree.closeNodeScope(jjtn003, true);
                                                 }
      }
      jj_consume_token(RCHAVETA);
      if (jj_2_41(2)) {
                                                                                  SimpleNode jjtn004 = new SimpleNode(JJTELSE);
                                                                                  boolean jjtc004 = true;
                                                                                  jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(ELSE);
        } finally {
                                                                                  if (jjtc004) {
                                                                                    jjtree.closeNodeScope(jjtn004, true);
                                                                                  }
        }
        jj_consume_token(LCHAVETA);
                                                                                                              SimpleNode jjtn005 = new SimpleNode(JJTSTMTLST);
                                                                                                              boolean jjtc005 = true;
                                                                                                              jjtree.openNodeScope(jjtn005);
        try {
          Stmtlst();
        } catch (Throwable jjte005) {
                                                                                                              if (jjtc005) {
                                                                                                                jjtree.clearNodeScope(jjtn005);
                                                                                                                jjtc005 = false;
                                                                                                              } else {
                                                                                                                jjtree.popNode();
                                                                                                              }
                                                                                                              if (jjte005 instanceof RuntimeException) {
                                                                                                                {if (true) throw (RuntimeException)jjte005;}
                                                                                                              }
                                                                                                              if (jjte005 instanceof ParseException) {
                                                                                                                {if (true) throw (ParseException)jjte005;}
                                                                                                              }
                                                                                                              {if (true) throw (Error)jjte005;}
        } finally {
                                                                                                              if (jjtc005) {
                                                                                                                jjtree.closeNodeScope(jjtn005, true);
                                                                                                              }
        }
        jj_consume_token(RCHAVETA);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Exprtest() throws ParseException {
  Token t1;
    expr=true;
    jj_consume_token(LPAR);
             SimpleNode jjtn001 = new SimpleNode(JJTLHS);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
    try {
      Lhs();
    } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
    } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
    }
    t1 = jj_consume_token(RELA_OP);
    SimpleNode jjtn002 = new SimpleNode(JJTWHILEOP);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    try {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;

    } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
    }
    SimpleNode jjtn003 = new SimpleNode(JJTRHS);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    try {
      Rhs();
    } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
    } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
    }
    jj_consume_token(RPAR);
    //TODO
        for (int i=0; i < tempExprType.size(); i++)
                System.out.println("CHECK THIS OUT: "+tempExprType.get(i));

        tempExprType.clear();
  }

  static final public void Call() throws ParseException {
  Token t1;
    t1 = jj_consume_token(ID);
    if (jj_2_42(2)) {
      jj_consume_token(33);
      jj_consume_token(ID);
    } else {
      ;
    }
    if (!functions.containsKey((String) t1.image))
        {
            error = true;
            errorMessage = "Call: Missplaced or nonexistent function call: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
        }

        if (expr == true)
        {
          String returnF=functions.get((String) t1.image);

    if(!funcReturn.containsKey(returnF))
    {
                        error = true;
            errorMessage = "Expr: return void function call: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
    }else
    {
        String type=funcReturn.get(returnF).getType();
                tempExprType.add(type);
    }
  }

    order.add((String) t1.image);
    jj_consume_token(LPAR);
    if (jj_2_43(2)) {
     SimpleNode jjtn001 = new SimpleNode(JJTARGUMENTLIST);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        ArgumentList();
      } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
    } else {
      ;
    }
    jj_consume_token(RPAR);
        System.out.println("NARGS: "+nArgs);
  }

  static final public void ArgumentList() throws ParseException {
  String lastFunc=order.get(order.size() - 1);
  for (Entry<String, Object> e : funcParams.entrySet()) {
                if (e.getKey().startsWith(lastFunc)) {
                        Object ob1=funcParams.get(e.getKey());
                        tempFuncParamsType.add(ob1.getType());
                        //System.out.println("CHECK : "+ob1.getType());
                }
        }
        Collections.reverse(tempFuncParamsType);
        /*for(int i=0; i < tempFuncParamsType.size();i++)
		System.out.println("NOW LOOK: "+tempFuncParamsType.get(i));*/

    Argument();
    nArgs++;
    label_5:
    while (true) {
      if (jj_2_44(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(VIRG);
      Argument();
      SimpleNode jjtn001 = new SimpleNode(JJTARGUMENT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      nArgs++;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    }
      if (nArgs != tempFuncParamsType.size())
      {
                  error = true;
              errorMessage = "Call: Invalid number of parameters: " + nArgs+" should be: "+tempFuncParamsType.size();
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
      }
                nArgs=0;
                tempFuncParamsType.clear();
  }

  static final public void Argument() throws ParseException {
  Token t1, t2, t3;
   if (nArgs == tempFuncParamsType.size())
      {
                  error = true;
                  nArgs++;
              errorMessage = "Call: Invalid number of parameters: " + nArgs+" should be at max: "+tempFuncParamsType.size();
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
      }
    if (jj_2_45(2)) {
      SimpleNode jjtn001 = new SimpleNode(JJTID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        t1 = jj_consume_token(ID);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    if (localType == 0)
    {
      if (!localVars.containsKey((String) t1.image))
      {
        if (!funcParams.containsKey((String) t1.image))
        {
          if (!globalVars.containsKey((String) t1.image))
          {
            error = true;
            errorMessage = "Call: Invalid param id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          else
          {
            if (!globalVars.get((String) t1.image).getType().equals(tempFuncParamsType.get(nArgs)))
            {
              String type1=globalVars.get((String) t1.image).getType();
              String type2=tempFuncParamsType.get(nArgs);
              error = true;
              errorMessage = "Call: Invalid param("+nArgs+") id type: " +type1+" should be: "+type2;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
          }
        }
        else
        {
          if (!funcParams.get((String) t1.image).getType().equals(tempFuncParamsType.get(nArgs)))
            {
              String type1=funcParams.get((String) t1.image).getType();
              String type2=tempFuncParamsType.get(nArgs);
              error = true;
             errorMessage = "Call: Invalid param("+nArgs+") id type: " + type1+" should be: "+type2;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
        }
      }
      else
      {
          if (!localVars.get((String) t1.image).getType().equals(tempFuncParamsType.get(nArgs)))
            {
              String type1=localVars.get((String) t1.image).getType();
              String type2=tempFuncParamsType.get(nArgs);
              error = true;
              errorMessage = "Call: Invalid param("+nArgs+") id type: " + type1+" should be: "+type2;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
      }
    }
    } else if (jj_2_46(2)) {
      SimpleNode jjtn002 = new SimpleNode(JJTSTRING);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        t2 = jj_consume_token(STRING);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
 System.out.println((String) t2.image);
    } else if (jj_2_47(2)) {
      SimpleNode jjtn003 = new SimpleNode(JJTINTEGER);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        t3 = jj_consume_token(INTEGER);
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
      }
     System.out.println("INTEGER: "+(String) t3.image);

    if (!tempFuncParamsType.get(nArgs).equals("scalar"))
    {
              String type1=tempFuncParamsType.get(nArgs);
              error = true;
              errorMessage = "Call: Invalid param("+nArgs+") id type: scalar should be: "+type1;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
    }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ArrayAccess() throws ParseException {
  Token t1;
    t1 = jj_consume_token(ID);
    arrayAccess=true;

   /* if (globalVar == true)
    {
    	if (!globalVars.containsKey((String) t1.image))
      	{
      	    error = true;
            errorMessage = "ArrayAccess: Invalid array id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
      	}else
      	{
			order.add((String) t1.image);
      	}
    }*/

    if (localType == 0 || globalVar == true)
    {
      if (!localVars.containsKey((String) t1.image))
      {
        if (!funcParams.containsKey((String) t1.image))
        {
          if (!globalVars.containsKey((String) t1.image))
          {
            error = true;
            errorMessage = "Params: ArrayAccess: Invalid array id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          else
          {
            if (globalVars.get((String) t1.image).getSize().equals("null"))
            {
              error = true;
              errorMessage = "Params: ArrayAccess: Uninitialized array id: " + (String) t1.image;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
            order.add((String) t1.image);

                        Object ob1=globalVars.get((String) t1.image);
            aSize=Integer.parseInt(ob1.getSize());
          }
        }
        else
        {
          if (funcParams.get((String) t1.image).getSize().equals("null"))
          {
            error = true;
            errorMessage = "Params: ArrayAccess: Uninitialized array id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          order.add((String) t1.image);
          Object ob1=funcParams.get((String) t1.image);
            aSize=Integer.parseInt(ob1.getSize());
        }
      }
      else
      {
        if (localVars.get((String) t1.image).getSize().equals("null"))
        {
          error = true;
          errorMessage = "Params: ArrayAccess: Uninitialized array id: " + (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);
        }
        order.add((String) t1.image);
        Object ob1=localVars.get((String) t1.image);
        aSize=Integer.parseInt(ob1.getSize());
      }
    }
    jj_consume_token(31);
        SimpleNode jjtn001 = new SimpleNode(JJTINDEX);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
    try {
      Index();
    } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
    } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
    }
    jj_consume_token(32);
        if (expr == true)
  {
    tempExprType.add("array");
  }
        if (stm == true)
                order.add((String) t1.image);
  }

  static final public void ScalarAccess() throws ParseException {
  Token t1;
    t1 = jj_consume_token(ID);
    if (jj_2_48(2)) {
      jj_consume_token(33);
      jj_consume_token(SIZE);
        SimpleNode jjtn001 = new SimpleNode(JJTSIZE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
        size=true;

        System.out.println("scalarAccess id: " + (String) t1.image);
        if (globalVar == true)
        {
          if (!globalVars.containsKey((String) t1.image))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid var.size: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          String lastGlobal = order.get(order.size() - 1);
          Object ob1 = globalVars.get((String) t1.image);
          Object ob2 = globalVars.get(lastGlobal);

          if (!ob1.getType().equals("array"))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid var type. Must be array type. Current is: "+ ob1.getType();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          if (ob1.getSize().equals("null"))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid var.size: " + (String) t1.image + "." + ob1.getValue();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }

          if (arraySize == true)
          {
            ob2.setType("array");
                        ob2.setSize(ob1.getSize());
                  }else ob2.setValue(ob1.getSize());

          globalVars.put(lastGlobal, ob2);
        }
        else if (localType == 0)
        {
          if (!localVars.containsKey((String) t1.image))
          if (!funcParams.containsKey((String) t1.image))
          if (!globalVars.containsKey((String) t1.image))
          {
            error = true;
            errorMessage = "Params: ScalarAccess: Invalid var.size: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
        }
        //  jjtThis.ScalarA = (String) t1.image;

      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
    } else {
      ;
    }
          if (size == false)
          {
        if (globalVar == true)
        {
          if (!globalVars.containsKey((String) t1.image))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid scalar id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
                        String lastGlobal = order.get(order.size() - 1);
            Object ob1 = globalVars.get((String) t1.image);
            Object ob2 = globalVars.get(lastGlobal);

                if (!ob1.getType().equals("scalar"))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid var type. Must be scalar typeFF. Current is: "+ ob1.getType();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          if (ob1.getValue().equals("null"))
          {
            error = true;
            errorMessage = "ScalarAccess: Uninitialized var: " + ob1.getName() +"; value: "+ ob1.getValue();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          ob2.setSize(ob1.getValue());

          if (arraySize == true)
                ob2.setType("array");

          globalVars.put(lastGlobal, ob2);

        }
  }
        if (expr == true)
        {
          if (!localVars.containsKey((String) t1.image))
      {
        if (!funcParams.containsKey((String) t1.image))
        {
          if (!globalVars.containsKey((String) t1.image))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          else
          {
            if (!globalVars.get((String) t1.image).getType().equals("scalar"))
            {
              String type=globalVars.get((String) t1.image).getType();
              error = true;
              errorMessage = "ScalarAccess: Invalid scalar id: " + (String) t1.image+"; type: "+type+" should be: scalar";
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
          }
        }
        else
        {
          if (!funcParams.get((String) t1.image).getType().equals("scalar"))
          {
             String type=funcParams.get((String) t1.image).getType();
            error = true;
            errorMessage = "ScalarAccess: Invalid scalar id: " + (String) t1.image+"; type: "+type+" should be: scalar";
              System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
        }
      }
      else
      {
        if (!localVars.get((String) t1.image).getType().equals("scalar"))
        {
          String type=localVars.get((String) t1.image).getType();
            error = true;
            errorMessage = "ScalarAccess: Invalid scalar id: " + (String) t1.image+"; type: "+type+" should be: scalar";
              System.out.println("ERROR: " + errorMessage);
             System.exit(1);
        }
      }

          tempExprType.add("scalar");
        }

        if (stm == true)
                order.add((String) t1.image);
  }

  static final public void Index() throws ParseException {
  Token t1;
    if (jj_2_49(2)) {
      t1 = jj_consume_token(ID);
      SimpleNode jjtn001 = new SimpleNode(JJTID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      String lastGlobal=order.get(order.size()-1);

      if (localType == 0 || globalVar == true)
      {
        if (!localVars.containsKey((String) t1.image))
        {

        if (!funcParams.containsKey((String) t1.image))
        {

        if (!globalVars.containsKey((String) t1.image))
        {
          error = true;
          errorMessage = "Params: index : Invalid scalar id: " + (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);
        }else
        {
                Object ob1=globalVars.get((String) t1.image);

                if (!ob1.getType().equals("scalar"))
                {
                                error = true;
                          errorMessage = "Params: index : Invalid type id: must be scalar; Current: " + ob1.getType();
                          System.out.println("ERROR: " + errorMessage);
                          System.exit(1);
                }
                        if(Integer.parseInt(ob1.getValue()) >= 0 && Integer.parseInt(ob1.getValue()) < aSize)
                        indexArray=ob1.getValue();
                else
                {
                  error = true;
                  errorMessage = "ArrayAccess: Invalid index: must be > 0 and < "+aSize+"; Current: " + ob1.getValue();
                  System.out.println("ERROR: " + errorMessage);
                  System.exit(1);
                }
        }
      }else {
                Object ob1=funcParams.get((String) t1.image);

                if (!ob1.getType().equals("scalar"))
                {
                                error = true;
                          errorMessage = "Params: index : Invalid type id: must be scalar; Current: " + ob1.getType();
                          System.out.println("ERROR: " + errorMessage);
                          System.exit(1);
                }

                        if(Integer.parseInt(ob1.getValue()) >= 0 && Integer.parseInt(ob1.getValue()) < aSize)
                        indexArray=ob1.getValue();
                else
                {
                  error = true;
                  errorMessage = "ArrayAccess: Invalid index: must be > 0 and < "+aSize+"; Current: " + ob1.getValue();
                  System.out.println("ERROR: " + errorMessage);
                  System.exit(1);
                }
        }
      }
      /*jjtThis.Indice = (String) t1.image;*/
    }else {
                Object ob1=localVars.get((String) t1.image);

                if (!ob1.getType().equals("scalar"))
                {
                                error = true;
                          errorMessage = "Params: index : Invalid type id: must be scalar; Current: " + ob1.getType();
                          System.out.println("ERROR: " + errorMessage);
                          System.exit(1);
                }

                        if(Integer.parseInt(ob1.getValue()) >= 0 && Integer.parseInt(ob1.getValue()) < aSize)
                        indexArray=ob1.getValue();
                else
                {
                  error = true;
                  errorMessage = "ArrayAccess: Invalid index: must be > 0 and < "+aSize+"; Current: " + ob1.getValue();
                  System.out.println("ERROR: " + errorMessage);
                  System.exit(1);
                }
        }
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_50(2)) {
      t1 = jj_consume_token(INTEGER);
      SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
        if(Integer.parseInt((String) t1.image) >= 0 && Integer.parseInt((String) t1.image) < aSize)
                        indexArray=(String) t1.image;
        else
        {
          error = true;
          errorMessage = "ArrayAccess: Invalid index: must be > 0 and < "+aSize+"; Current: " + (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);
        }
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
                aSize=-1;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(LCHAVETA)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(ADDSUB_OP)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(ADDSUB_OP)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(VIRG)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    if (jj_scan_token(PVIRG)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(ADDSUB_OP)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(BITWISE_OP)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(31)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(SIZE)) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(ARITH_OP)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(31)) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    }
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(VIRG)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[50];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Grammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Grammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Grammar(GrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 50; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
