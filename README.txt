**PROJECT TITLE: SIMPLE: A compiler of Simple to Java Bytecodes
**GROUP: 5SIMPLE

NAME1: André Pinto, NR1: up201303663@fe.up.pt, GRADE1: 14, CONTRIBUTION: 25 %)
NAME2: Diana Pinto, NR2: up201303187@fe.up.pt, GRADE2: 14, CONTRIBUTION: 25 %)
NAME3: Mariana Guimarães, NR3: up201307777@fe.up.pt, GRADE3: 14, CONTRIBUTION: 25 %)
NAME4: Ricardo Lopes, NR4: up201303933@fe.up.pt, GRADE4: 14, CONTRIBUTION: 25 %)


** SUMMARY: 
It's a compiler for Simple, it generates files of the classes with JVM instructions accepted by jasmin, that translate the classes in bytecodes. 


**DEALING WITH SYNTACTIC ERRORS: 
when a sintactic error is detected it imediatly stops and prints the JavaCC's message error after catching the exception thrown by the JavaCC.


**SEMANTIC ANALYSIS:
The types of semantic errors that our compiler detects are :
	- Variable initialisation (array and scalar)
	- array indexes and sizes
	- Type incongruences in functions params and return, while and if expressions and var declarations
	- If var does not exist
	- duplicated functions names
	- diferente type vars with same id


**INTERMEDIATE REPRESENTATIONS (IRs): 
The intermediate representation is an AST generated by JavaCC. It is high level because it uses the direct variable identifiers and direct operation signs,etc… The tool also generates a CFG(Control Flow Graph) from the AST with each node being an assignment, call and condition, being this way high level as well.

**OVERVIEW:
The program runs over the semantic analysis completing the .j file for jasmin. If occurs any syntatic or semantic error, the program is shutdown and the file stays empty. On the other hand if there are no erros, the file is generated.

**TESTSUITE AND TEST INFRASTRUCTURE:
We used text files to test the program with yal code. We did not use automated testing to develop the tool.


**TASK DISTRIBUTION: 

	André Pinto: semantic function analysis, assignment semantic analysis, function and assignment code generation
	Diana Pinto: AST, semantic analysis on conditions, while code generation, call semantic analysis, call generation
	Mariana: semantic analysis on fields, generating field
	Ricardo Lopes: semantic function analysis, semantic analysis on fields, generating if conditions and while conditions


**PROS: 
-All semantic declaration was implemented.
-Type (Array/Scalar) verifications.
-Detectes almost every semantic error besides operations.


**CONS: 
- Does not generate all jvn code for jasmin.
- Shutdown when error occurs. Display only one error.
- No otimizations were implemented.
