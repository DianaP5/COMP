/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Grammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;  LOOKAHEAD= 2;}PARSER_BEGIN(Grammar)import java.util.HashMap;import java.lang.*;import java.util.*;import java.io.File;import java.io.FileInputStream;import java.io.BufferedReader;import java.io.FileReader;import java.io.FileNotFoundException;

import java.util.Map.Entry;public class Grammar/*@bgen(jjtree)*/implements GrammarTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTGrammarState jjtree = new JJTGrammarState();

/*@egen*/  /*local vars-> params function-> global vars*/  private static HashMap < String, Object > localVars = new HashMap < String, Object > ();  private static HashMap < String, Object > funcParams = new HashMap < String, Object > ();  private static HashMap < String, Object > globalVars = new HashMap < String, Object > ();  private static HashMap < String, Object > funcReturn = new HashMap < String, Object > ();  private static HashMap < String, String > functions = new HashMap < String, String > ();  private static ArrayList < String > order = new ArrayList < String > ();

  private static ArrayList < String > tempFuncParamsType = new ArrayList < String > ();  private static String ret, declaration, funcName, LocalVar, numFunc, numFunc2, name_f2, name_f1, ReturnVar, string_aux2;  private static int i = 0, j = 0, aux = 0, k = 0, g = 0, aux1 = 0, flag = 0, flagArrSize = 0, flagt1, flagt2;  private static String globalSignal, filename;  private static File teste;  private static Boolean globalVar = false, funcParam = false, localVar = false, error = false;  private static int localType = - 1, nArgs=0;  private static String errorMessage = "";  /** ArrayList arr. */  private static ArrayList < String > arr;  public static void main(String args []) throws FileNotFoundException  {    File f1 = new File("examples/teste.txt");    if (f1.exists())    {      FileInputStream s1 = new FileInputStream(f1);      System.out.println("Reading file...");    }    else System.out.println("File not found.");    try    {      BufferedReader stream = new BufferedReader(new FileReader(f1));      Grammar myYal = new Grammar(stream);      SimpleNode root = myYal.Module();      root.dump("");      /* TESTING
      for (int i=0; i < order.size(); i++)
      	System.out.println("ORDER: "+order.get(i));
*/      System.out.println("ISTO: " + globalVars.get("ab").getValue());      System.out.println("Accepted. " + myYal.eval(root));      JVCgenerator g1 = new JVCgenerator("teste");      g1.addModule("nomeModulo");      g1.addVar("variavel", "2");      g1.closeWriter();    }    catch (Exception e)    {      System.out.println("Error!");      System.out.println("MESSAGE: " + e.getMessage());    }  }  int eval(SimpleNode node)  {    if (node.jjtGetNumChildren() == 0)  // leaf node with integer value
    return node.val;    else if (node.jjtGetNumChildren() == 1)  // only one child
    return this.eval((SimpleNode) node.jjtGetChild(0));    SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
    SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
    switch (node.id)    {      case GrammarTreeConstants.JJTMODULE :       //PORQUE? TODO
      System.out.println(".class public ");      break;      default : // abort
      System.out.println("Operador ilegal!");      System.exit(1);    }    return 0;  }}PARSER_END(Grammar)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      "*"    | ~[ "*", "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < RELA_OP :    ">"  | "<"  | "<="  | ">="  | "=="  | "!=" >| < ADDSUB_OP :    "+"  | "-" >| < ARITH_OP :    "*"  | "/"  | "<<"  | ">>"  | ">>>" >| < BITWISE_OP :    "&"  | "|"  | "^" >| < NOT_OP : "!" >| < WHILE : "while" >| < IF : "if" >| < ELSE : "else" >| < ASSIGN : "=" >| < ASPA : "\"" >| < LPAR : "(" >| < RPAR : ")" >| < VIRG : "," >| < PVIRG : ";" >| < LCHAVETA : "{" >| < RCHAVETA : "}" >| < FUNCTION : "function" >| < MODULE : "module" >| < SIZE : "size" >}TOKEN : /* IDENTIFIERS */{  < INTEGER : (< DIGIT >)+ >| < ID :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >| < #DIGIT : [ "0"-"9" ] >| < STRING : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", ":", " ", "=" ])+ "\"" >}SimpleNode Module() :{/*@bgen(jjtree) Module */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t1;}{/*@bgen(jjtree) Module */
  try {
/*@egen*/  < MODULE > t1 = < ID >/*@bgen(jjtree) ID */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTID);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.module = (String) t1.image;    System.out.println("MODULE: " + t1.image);    globalVar = true;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/        < LCHAVETA > (/*@bgen(jjtree) Declaration */
                {
                  SimpleNode jjtn002 = new SimpleNode(JJTDECLARATION);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/Declaration()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/             )*(/*@bgen(jjtree) Function */
  {
    SimpleNode jjtn003 = new SimpleNode(JJTFUNCTION);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/  Function()/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/          )*< RCHAVETA >/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/{  return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Declaration()       :{  Token t1, t2;}{  (/*@bgen(jjtree) Array */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTARRAY);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    ArrayElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/         |/*@bgen(jjtree) Scalar */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTSCALAR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ ScalarElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/        )(  < ASSIGN >  (    (      "["/*@bgen(jjtree) ArraySize */
      {
        SimpleNode jjtn003 = new SimpleNode(JJTARRAYSIZE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/       ArraySize()/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/                  "]"    )  |    (      (t1 = < ADDSUB_OP >)/*@bgen(jjtree) AddSubOP */
      {
        SimpleNode jjtn004 = new SimpleNode(JJTADDSUBOP);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn004, true);
        jjtc004 = false;
      }
/*@egen*/      {        if (globalVar == true)        {          String lastGlobal = order.get(order.size() - 1);          Object ob1 = globalVars.get(lastGlobal);          ob1.setOperator((String) t1.image);          globalVars.put(lastGlobal, ob1);        }        System.out.println("operator: " + (String) t1.image);        // jjtThis.val2 = (String) t1.image; globalSignal = (String) t1.image;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
      }
/*@egen*/                   )?    (      t2 = < INTEGER >/*@bgen(jjtree) IntValue */
      {
        SimpleNode jjtn005 = new SimpleNode(JJTINTVALUE);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn005, true);
        jjtc005 = false;
      }
/*@egen*/      {        if (globalVar == true)        {          String lastGlobal = order.get(order.size() - 1);          Object ob1 = globalVars.get(lastGlobal);          if (!ob1.getSize().equals("null") && ob1.getType().equals("array"))          {            if (ob1.getOperator().equals("-"))             ob1.setValue("-" + (String) t2.image);            else ob1.setValue((String) t2.image);            globalVars.put(lastGlobal, ob1);          }          else if (ob1.getSize().equals("null") && ob1.getType().equals("array"))          {            error = true;            errorMessage = "Array: Uninitialized array : " + (String) t2.image;            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }          else          {            if (ob1.getOperator().equals("-"))             ob1.setValue("-" + (String) t2.image);            else ob1.setValue((String) t2.image);            globalVars.put(lastGlobal, ob1);          }        }        System.out.println("Value: " + Integer.parseInt((String) t2.image));        /*jjtThis.valorInicial = Integer.parseInt(globalSignal + (String) t2.image)*/        ;      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
        }
      }
/*@egen*/               )  ))?< PVIRG >}void Function()           :{/*@bgen(jjtree) function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t1;}{/*@bgen(jjtree) function */
  try {
/*@egen*/  {    globalVar = false;  }  (    LOOKAHEAD(3)    (      < FUNCTION >      (/*@bgen(jjtree) funcReturn */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTFUNCRETURN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/        functionReturn()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/            )      < ASSIGN > t1 = < ID >      {        if (!functions.containsKey((String) t1.image))        {          String lastReturn = order.get(order.size() - 1);          String returnName = funcReturn.get(lastReturn).getName();          functions.put((String) t1.image, returnName);          order.add((String) t1.image);        }        else        {          error = true;          errorMessage = "Functions with same name: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }        System.out.println("func assign id: " + (String) t1.image);      }      < LPAR >      (/*@bgen(jjtree) VarList */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTVARLIST);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/        Varlist()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/         )?      < RPAR >    )  |    (      < FUNCTION > t1 = < ID >      {        if (!functions.containsKey((String) t1.image))        {          String lastReturn = order.get(order.size() - 1);          functions.put((String) t1.image, "null");          order.add((String) t1.image);        }        else        {          error = true;          errorMessage = "Functions with same name: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }        System.out.println("func id: " + (String) t1.image);      }      < LPAR >      (/*@bgen(jjtree) VarList */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTVARLIST);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/        Varlist()/*@bgen(jjtree)*/
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            throw (RuntimeException)jjte003;
          }
          if (jjte003 instanceof ParseException) {
            throw (ParseException)jjte003;
          }
          throw (Error)jjte003;
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/         )?      < RPAR >    )  )  {    funcParam = false;  }  < LCHAVETA >/*@bgen(jjtree) StmtLst */
               {
                 SimpleNode jjtn004 = new SimpleNode(JJTSTMTLST);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
               }
               try {
/*@egen*/ Stmtlst()/*@bgen(jjtree)*/
               } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   throw (RuntimeException)jjte004;
                 }
                 if (jjte004 instanceof ParseException) {
                   throw (ParseException)jjte004;
                 }
                 throw (Error)jjte004;
               } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004, true);
                 }
               }
/*@egen*/          < RCHAVETA >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void functionReturn()       :{  Token t1;}{  (    t1 = < ID >/*@bgen(jjtree) ID */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/    {      System.out.println("Func return id: " + (String) t1.image);      //jjtThis.nameF = (String) t1.image; name_f1 = (String) t1.image;
      if (!funcReturn.containsKey((String) t1.image))      {        Object ob1 = new Object((String) t1.image, "scalar", null);        funcReturn.put((String) t1.image, ob1);        order.add((String) t1.image);      }      else      {        error = true;        errorMessage = "Function: Return var with same id: " + (String) t1.image;        System.out.println("ERROR: " + errorMessage);        System.exit(1);      }    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/       )  (    "[" "]"    {      String lastReturn = order.get(order.size() - 1);      Object ob1 = funcReturn.get(lastReturn);      ob1.setType("array");      funcReturn.put(lastReturn, ob1);      System.out.println("Func return type: ARRAY");    }  )?}void Varlist()       :{}{  {    funcParam = true;  }  (/*@bgen(jjtree) Array */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTARRAY);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    ArrayElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/         |/*@bgen(jjtree) Scalar */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTSCALAR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ ScalarElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/        )(  < VIRG >  (/*@bgen(jjtree) Array */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTARRAY);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/    ArrayElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/         |/*@bgen(jjtree) Scalar */
    {
      SimpleNode jjtn004 = new SimpleNode(JJTSCALAR);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    }
    try {
/*@egen*/ ScalarElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        throw (RuntimeException)jjte004;
      }
      if (jjte004 instanceof ParseException) {
        throw (ParseException)jjte004;
      }
      throw (Error)jjte004;
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
    }
/*@egen*/        ))*}void ArrayElement()       :{  Token t1;}{  (    t1 = < ID >/*@bgen(jjtree) ID */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/    {      if (globalVar == true)      {        if (!globalVars.containsKey((String) t1.image))        {          Object ob1 = new Object((String) t1.image, "array", null);          globalVars.put((String) t1.image, ob1);          order.add((String) t1.image);        }        else        {          error = true;          errorMessage = "Array: Global var with same name: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }      }      else if (funcParam == true)      {        String lastFunc = order.get(order.size() - 1);        if (!funcParams.containsKey(lastFunc + " " + (String) t1.image))        {          Object ob1 = new Object((String) t1.image, "array", null);          funcParams.put(lastFunc + " " + (String) t1.image, ob1);          System.out.println("Array: Func param id: " + (String) t1.image);          //order.add((String) t1.image);
        }        else        {          error = true;          errorMessage = "Array: Function param with same name: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }      }      System.out.println("array id: " + (String) t1.image);      //jjtThis.globalVar = (String) t1.image; declaration = (String) t1.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/       )  ("[" "]"  )}void ScalarElement()       :{  Token t1;}{  (    t1 = < ID >/*@bgen(jjtree) ID */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/    {      if (globalVar == true)      {        if (!globalVars.containsKey((String) t1.image))        {          Object ob1 = new Object((String) t1.image, "scalar", null);          globalVars.put((String) t1.image, ob1);          order.add((String) t1.image);        }        else        {          Object ob1 = globalVars.get((String) t1.image);        /*  if (ob1.getType().equals("scalar"))          {            error = true;            errorMessage = "Scalar: Global var with same name: " + (String) t1.image;            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }*/
                    order.add((String) t1.image);        }      }      if (funcParam == true)      {        String lastFunc = order.get(order.size() - 1);        if (!funcParams.containsKey(lastFunc + " " + (String) t1.image))        {          Object ob1 = new Object((String) t1.image, "scalar", null);          funcParams.put(lastFunc + " " + (String) t1.image, ob1);          System.out.println("Scalar: Func param id: " + (String) t1.image);          //order.add((String) t1.image);
        }        else        {          error = true;          errorMessage = "Scalar: Function param with same name: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }      }      System.out.println("Scalar id: " + (String) t1.image);      //jjtThis.globalVar = (String) t1.image; declaration = (String) t1.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/       )}void Stmtlst()       :{}{  {    localVar = true;  }  (/*@bgen(jjtree) Stmt */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTSTMT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    Stmt()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/      )*}void Stmt()       :{}{/*@bgen(jjtree) WHILE */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTWHILE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  While()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/        |/*@bgen(jjtree) IF */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTIF);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ If()/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/    | LOOKAHEAD(3)(/*@bgen(jjtree) ASSIGN */
  {
    SimpleNode jjtn003 = new SimpleNode(JJTASSIGN);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/  Assign()/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/        )|/*@bgen(jjtree) CALL */
  {
    SimpleNode jjtn004 = new SimpleNode(JJTCALL);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/ Call()/*@bgen(jjtree)*/
  } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      throw (RuntimeException)jjte004;
    }
    if (jjte004 instanceof ParseException) {
      throw (ParseException)jjte004;
    }
    throw (Error)jjte004;
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/       < PVIRG >}//TODO 
void Assign()         :{/*@bgen(jjtree) assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) assign */
  try {
/*@egen*//*@bgen(jjtree) Lhs */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTLHS);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  Lhs()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/      < ASSIGN >/*@bgen(jjtree) Rhs */
                        {
                          SimpleNode jjtn002 = new SimpleNode(JJTRHS);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*/ Rhs()/*@bgen(jjtree)*/
                        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            throw (RuntimeException)jjte002;
                          }
                          if (jjte002 instanceof ParseException) {
                            throw (ParseException)jjte002;
                          }
                          throw (Error)jjte002;
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/      < PVIRG >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Lhs()       :{}{  (/*@bgen(jjtree) ArrayAccess */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTARRAYACCESS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    ArrayAccess()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/               |/*@bgen(jjtree) ScalarAccess */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTSCALARACCESS);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ ScalarAccess()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/              )}void Rhs()       :{  Token t1;}{  (    (/*@bgen(jjtree) Term */
     {
       SimpleNode jjtn001 = new SimpleNode(JJTTERM);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/Term()/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
     }
/*@egen*/      )    (      (/*@bgen(jjtree) ARITHOP */
       {
         SimpleNode jjtn002 = new SimpleNode(JJTARITHOP);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
       }
       try {
/*@egen*/t1 = < ARITH_OP >/*@bgen(jjtree)*/
       } finally {
         if (jjtc002) {
           jjtree.closeNodeScope(jjtn002, true);
         }
       }
/*@egen*/               |/*@bgen(jjtree) BITWISEOP */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTBITWISEOP);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/ t1 = < BITWISE_OP >/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/                 |/*@bgen(jjtree) ADDSUBOP */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTADDSUBOP);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/ t1 = < ADDSUB_OP >/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/          )      (/*@bgen(jjtree) Term */
       {
         SimpleNode jjtn005 = new SimpleNode(JJTTERM);
         boolean jjtc005 = true;
         jjtree.openNodeScope(jjtn005);
       }
       try {
/*@egen*/Term()/*@bgen(jjtree)*/
       } catch (Throwable jjte005) {
         if (jjtc005) {
           jjtree.clearNodeScope(jjtn005);
           jjtc005 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte005 instanceof RuntimeException) {
           throw (RuntimeException)jjte005;
         }
         if (jjte005 instanceof ParseException) {
           throw (ParseException)jjte005;
         }
         throw (Error)jjte005;
       } finally {
         if (jjtc005) {
           jjtree.closeNodeScope(jjtn005, true);
         }
       }
/*@egen*/      ) )?  )  | "["/*@bgen(jjtree) ArraySize */
        {
          SimpleNode jjtn006 = new SimpleNode(JJTARRAYSIZE);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
        }
        try {
/*@egen*/ ArraySize()/*@bgen(jjtree)*/
        } catch (Throwable jjte006) {
          if (jjtc006) {
            jjtree.clearNodeScope(jjtn006);
            jjtc006 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte006 instanceof RuntimeException) {
            throw (RuntimeException)jjte006;
          }
          if (jjte006 instanceof ParseException) {
            throw (ParseException)jjte006;
          }
          throw (Error)jjte006;
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
/*@egen*/            "]"}void ArraySize():{/*@bgen(jjtree) ArraySize */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t1;}{/*@bgen(jjtree) ArraySize */
  try {
/*@egen*/  (    (/*@bgen(jjtree) ScalarAccess */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTSCALARACCESS);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/      ScalarAccess()/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/                  )  | t1 = < INTEGER >/*@bgen(jjtree) Int */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTINT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
    }
/*@egen*/    {      if (globalVar == true)      {        String lastGlobal = order.get(order.size() - 1);        Object ob1 = globalVars.get(lastGlobal);        ob1.setSize((String) t1.image);
        ob1.setType("array");        globalVars.put(lastGlobal, ob1);      }      System.out.println("array size: " + (String) t1.image);      /*jjtThis.arraysize = Integer.parseInt((String)t1.image);*/    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/        )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Term()       :{  Token t1, t2;}{  (/*@bgen(jjtree) AddSubOP */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTADDSUBOP);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/t1 = < ADDSUB_OP >/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/          )?  (/*@bgen(jjtree) Integer */
   {
     SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/t2 = < INTEGER >/*@bgen(jjtree)*/
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/           |LOOKAHEAD(3) (/*@bgen(jjtree) Call */
                 {
                   SimpleNode jjtn003 = new SimpleNode(JJTCALL);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*/Call()/*@bgen(jjtree)*/
                 } catch (Throwable jjte003) {
                   if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
                     throw (RuntimeException)jjte003;
                   }
                   if (jjte003 instanceof ParseException) {
                     throw (ParseException)jjte003;
                   }
                   throw (Error)jjte003;
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
                 }
/*@egen*/      )  |/*@bgen(jjtree) ArrayAccess */
   {
     SimpleNode jjtn004 = new SimpleNode(JJTARRAYACCESS);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
   }
   try {
/*@egen*/ArrayAccess()/*@bgen(jjtree)*/
   } catch (Throwable jjte004) {
     if (jjtc004) {
       jjtree.clearNodeScope(jjtn004);
       jjtc004 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte004 instanceof RuntimeException) {
       throw (RuntimeException)jjte004;
     }
     if (jjte004 instanceof ParseException) {
       throw (ParseException)jjte004;
     }
     throw (Error)jjte004;
   } finally {
     if (jjtc004) {
       jjtree.closeNodeScope(jjtn004, true);
     }
   }
/*@egen*/                  |/*@bgen(jjtree) ScalarAccess */
   {
     SimpleNode jjtn005 = new SimpleNode(JJTSCALARACCESS);
     boolean jjtc005 = true;
     jjtree.openNodeScope(jjtn005);
   }
   try {
/*@egen*/ScalarAccess()/*@bgen(jjtree)*/
   } catch (Throwable jjte005) {
     if (jjtc005) {
       jjtree.clearNodeScope(jjtn005);
       jjtc005 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte005 instanceof RuntimeException) {
       throw (RuntimeException)jjte005;
     }
     if (jjte005 instanceof ParseException) {
       throw (ParseException)jjte005;
     }
     throw (Error)jjte005;
   } finally {
     if (jjtc005) {
       jjtree.closeNodeScope(jjtn005, true);
     }
   }
/*@egen*/              )
  
 }void While() :{/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) While */
  try {
/*@egen*/
  {
    localType = 0;
  }/*@bgen(jjtree) While */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTWHILE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  < WHILE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       /*@bgen(jjtree) Exprtest */
                   {
                     SimpleNode jjtn002 = new SimpleNode(JJTEXPRTEST);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                   }
                   try {
/*@egen*/ Exprtest()/*@bgen(jjtree)*/
                   } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       throw (RuntimeException)jjte002;
                     }
                     if (jjte002 instanceof ParseException) {
                       throw (ParseException)jjte002;
                     }
                     throw (Error)jjte002;
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
                   }
/*@egen*/           < LCHAVETA >/*@bgen(jjtree) Stmtlst */
                                                     {
                                                       SimpleNode jjtn003 = new SimpleNode(JJTSTMTLST);
                                                       boolean jjtc003 = true;
                                                       jjtree.openNodeScope(jjtn003);
                                                     }
                                                     try {
/*@egen*/ Stmtlst()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte003) {
                                                       if (jjtc003) {
                                                         jjtree.clearNodeScope(jjtn003);
                                                         jjtc003 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte003 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte003;
                                                       }
                                                       if (jjte003 instanceof ParseException) {
                                                         throw (ParseException)jjte003;
                                                       }
                                                       throw (Error)jjte003;
                                                     } finally {
                                                       if (jjtc003) {
                                                         jjtree.closeNodeScope(jjtn003, true);
                                                       }
                                                     }
/*@egen*/          < RCHAVETA >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void If():{/*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) If */
  try {
/*@egen*//*@bgen(jjtree) If */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTIF);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  < IF >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/    /*@bgen(jjtree) Exprtest */
             {
               SimpleNode jjtn002 = new SimpleNode(JJTEXPRTEST);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
             }
             try {
/*@egen*/ Exprtest()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
               }
             }
/*@egen*/           < LCHAVETA >/*@bgen(jjtree) Stmtlst */
                                               {
                                                 SimpleNode jjtn003 = new SimpleNode(JJTSTMTLST);
                                                 boolean jjtc003 = true;
                                                 jjtree.openNodeScope(jjtn003);
                                               }
                                               try {
/*@egen*/ Stmtlst()/*@bgen(jjtree)*/
                                               } catch (Throwable jjte003) {
                                                 if (jjtc003) {
                                                   jjtree.clearNodeScope(jjtn003);
                                                   jjtc003 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte003 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte003;
                                                 }
                                                 if (jjte003 instanceof ParseException) {
                                                   throw (ParseException)jjte003;
                                                 }
                                                 throw (Error)jjte003;
                                               } finally {
                                                 if (jjtc003) {
                                                   jjtree.closeNodeScope(jjtn003, true);
                                                 }
                                               }
/*@egen*/          < RCHAVETA > (/*@bgen(jjtree) Else */
                                                                                {
                                                                                  SimpleNode jjtn004 = new SimpleNode(JJTELSE);
                                                                                  boolean jjtc004 = true;
                                                                                  jjtree.openNodeScope(jjtn004);
                                                                                }
                                                                                try {
/*@egen*/< ELSE >/*@bgen(jjtree)*/
                                                                                } finally {
                                                                                  if (jjtc004) {
                                                                                    jjtree.closeNodeScope(jjtn004, true);
                                                                                  }
                                                                                }
/*@egen*/       < LCHAVETA >/*@bgen(jjtree) Stmtlst */
                                                                                                            {
                                                                                                              SimpleNode jjtn005 = new SimpleNode(JJTSTMTLST);
                                                                                                              boolean jjtc005 = true;
                                                                                                              jjtree.openNodeScope(jjtn005);
                                                                                                            }
                                                                                                            try {
/*@egen*/ Stmtlst()/*@bgen(jjtree)*/
                                                                                                            } catch (Throwable jjte005) {
                                                                                                              if (jjtc005) {
                                                                                                                jjtree.clearNodeScope(jjtn005);
                                                                                                                jjtc005 = false;
                                                                                                              } else {
                                                                                                                jjtree.popNode();
                                                                                                              }
                                                                                                              if (jjte005 instanceof RuntimeException) {
                                                                                                                throw (RuntimeException)jjte005;
                                                                                                              }
                                                                                                              if (jjte005 instanceof ParseException) {
                                                                                                                throw (ParseException)jjte005;
                                                                                                              }
                                                                                                              throw (Error)jjte005;
                                                                                                            } finally {
                                                                                                              if (jjtc005) {
                                                                                                                jjtree.closeNodeScope(jjtn005, true);
                                                                                                              }
                                                                                                            }
/*@egen*/          < RCHAVETA >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Exprtest()       :{  Token t1;}{  < LPAR >/*@bgen(jjtree) Lhs */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTLHS);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ Lhs()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/        t1 = < RELA_OP >/*@bgen(jjtree) WhileOP */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTWHILEOP);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
  }
/*@egen*/  {  /*jjtThis.operation = (String) t1.image;*/  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/          /*@bgen(jjtree) Rhs */
  {
    SimpleNode jjtn003 = new SimpleNode(JJTRHS);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/   Rhs()/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/      < RPAR >}void Call()       :
{
  Token t1;}{  t1=<ID> ("." <ID>)?  {
    if (!functions.containsKey((String) t1.image))
    	{
    	    error = true;
            errorMessage = "Call: Missplaced or nonexistent function call: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);    	}
    order.add((String) t1.image);  }
   <LPAR>  (/*@bgen(jjtree) ArgumentList */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARGUMENTLIST);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/ArgumentList()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/              )?  <RPAR>
  {	System.out.println("NARGS: "+nArgs);
  }}void ArgumentList()       :{}{

{
  String lastFunc=order.get(order.size() - 1);
  for (Entry<String, Object> e : funcParams.entrySet()) {	
		if (e.getKey().startsWith(lastFunc)) {
		  	Object ob1=funcParams.get(e.getKey());
			tempFuncParamsType.add(ob1.getType());
   			//System.out.println("CHECK : "+ob1.getType());
  		}
	}
	Collections.reverse(tempFuncParamsType);
	/*for(int i=0; i < tempFuncParamsType.size();i++)
		System.out.println("NOW LOOK: "+tempFuncParamsType.get(i));*/
}
  Argument()  {
    nArgs++;  }
    (    < VIRG > Argument()/*@bgen(jjtree) Argument */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTARGUMENT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/    {
      nArgs++;    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/          )*
    {
      if (nArgs != tempFuncParamsType.size())      {
        	  error = true;
              errorMessage = "Call: Invalid number of parameters: " + nArgs+" should be: "+tempFuncParamsType.size();
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);      }		nArgs=0;
		for(int i=0; i < tempFuncParamsType.size();i++)
		System.out.println("HHHHHHHHHHHHHH: "+tempFuncParamsType.get(i));
		tempFuncParamsType.clear();
		for(int i=0; i < tempFuncParamsType.size();i++)
		System.out.println("HHHHHHHHHHHHHHHHH1: "+tempFuncParamsType.get(i));
    }}

void Argument()       :{  Token t1, t2, t3;}{
{  
   if (nArgs == tempFuncParamsType.size())
      {
        	  error = true;
        	  nArgs++;
              errorMessage = "Call: Invalid number of parameters: " + nArgs+" should be at max: "+tempFuncParamsType.size();
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
      }
    }
        (/*@bgen(jjtree) ID */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ t1 = < ID >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/      {
    if (localType == 0)
    {
      if (!localVars.containsKey((String) t1.image))
      {
        if (!funcParams.containsKey((String) t1.image))
        {
          if (!globalVars.containsKey((String) t1.image))
          {
            error = true;
            errorMessage = "Call: Invalid param id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          else
          {
            if (!globalVars.get((String) t1.image).getType().equals(tempFuncParamsType.get(nArgs)))
            {
              String type1=globalVars.get((String) t1.image).getType();
              String type2=tempFuncParamsType.get(nArgs);
              error = true;
              errorMessage = "Call: Invalid param("+nArgs+") id type: " +type1+" should be: "+type2;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
          }
        }
        else
        {
          if (!funcParams.get((String) t1.image).getType().equals(tempFuncParamsType.get(nArgs)))
            {
              String type1=funcParams.get((String) t1.image).getType();
              String type2=tempFuncParamsType.get(nArgs);
              error = true;
             errorMessage = "Call: Invalid param("+nArgs+") id type: " + type1+" should be: "+type2;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
        }
      }
      else
      {
          if (!localVars.get((String) t1.image).getType().equals(tempFuncParamsType.get(nArgs)))
            {
              String type1=localVars.get((String) t1.image).getType();
              String type2=tempFuncParamsType.get(nArgs);
              error = true;
              errorMessage = "Call: Invalid param("+nArgs+") id type: " + type1+" should be: "+type2;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
      }
    }  }  |/*@bgen(jjtree) STRING */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTSTRING);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ t2 = < STRING >/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/          { System.out.println((String) t2.image);
      
  }  |/*@bgen(jjtree) INTEGER */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTINTEGER);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/ t3 = < INTEGER >/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/         
  {
     System.out.println("INTEGER: "+(String) t3.image);
      
    if (!tempFuncParamsType.get(nArgs).equals("scalar"))
    {
              String type1=tempFuncParamsType.get(nArgs);
              error = true;
              errorMessage = "Call: Invalid param("+nArgs+") id type: scalar should be: "+type1;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
    }  })}void ArrayAccess()       :{  Token t1;}{  t1 = < ID >  {    if (localType == 0)    {      if (!localVars.containsKey((String) t1.image))      {        if (!funcParams.containsKey((String) t1.image))        {          if (!globalVars.containsKey((String) t1.image))          {            error = true;            errorMessage = "While params: ArrayAccess: Invalid array id: " + (String) t1.image;            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }          else          {            if (globalVars.get((String) t1.image).getValue().equals("null"))            {              error = true;              errorMessage = "While params: ArrayAccess: Uninitialized array id: " + (String) t1.image;              System.out.println("ERROR: " + errorMessage);              System.exit(1);            }          }        }        else        {          if (funcParams.get((String) t1.image).getValue().equals("null"))          {            error = true;            errorMessage = "While params: ArrayAccess: Uninitialized array id: " + (String) t1.image;            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }        }      }      else      {        if (localVars.get((String) t1.image).getValue().equals("null"))        {          error = true;          errorMessage = "While params: ArrayAccess: Uninitialized array id: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }      }    }  }  "["/*@bgen(jjtree) Index */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTINDEX);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ Index()/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/        "]"}void ScalarAccess()       :{  Token t1;}{  t1 = < ID >  (    "."    (      < SIZE >/*@bgen(jjtree) size */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTSIZE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
      }
/*@egen*/      {        System.out.println("scalarAccess id: " + (String) t1.image);        if (globalVar == true)        {          if (!globalVars.containsKey((String) t1.image))          {            error = true;            errorMessage = "ScalarAccess: Invalid var.size: " + (String) t1.image;            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }          String lastGlobal = order.get(order.size() - 1);          Object ob1 = globalVars.get((String) t1.image);          Object ob2 = globalVars.get(lastGlobal);

          if (!ob1.getType().equals("array"))          {
            error = true;
            errorMessage = "ScalarAccess: Invalid var type. Must be array  type. Current is: "+ ob1.getType();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);          }          if (ob1.getSize().equals("null"))          {            error = true;            errorMessage = "ScalarAccess: Invalid var.size: " + (String) t1.image + "." + ob1.getValue();            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }          ob2.setSize(ob1.getValue());
          ob2.setType("array");          globalVars.put(lastGlobal, ob2);        }        else if (localType == 0)        {          if (!localVars.containsKey((String) t1.image))           if (!funcParams.containsKey((String) t1.image))           if (!globalVars.containsKey((String) t1.image))          {            error = true;            errorMessage = "While params: ScalarAccess: Invalid var.size: " + (String) t1.image;            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }        }        //  jjtThis.ScalarA = (String) t1.image;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/           )  )?}void Index()       :{  Token t1;}{  (    t1 = < ID >/*@bgen(jjtree) ID */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/    {      if (localType == 0)      {        if (!localVars.containsKey((String) t1.image))         if (!funcParams.containsKey((String) t1.image))         if (!globalVars.containsKey((String) t1.image))        {          error = true;          errorMessage = "While params: index : Invalid scalar id: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }      }      /*jjtThis.Indice = (String) t1.image;*/    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/       )|  (    t1 = < INTEGER >/*@bgen(jjtree) Inteiro */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTINTEIRO);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
    }
/*@egen*/    {      jjtn002.valor = Integer.parseInt(t1.image);    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/            )}
