/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;  LOOKAHEAD= 2;}PARSER_BEGIN(Grammar)import java.util.LinkedHashMap;import java.lang.*;import java.util.*;import java.io.File;import java.io.FileInputStream;import java.io.BufferedReader;import java.io.FileReader;import java.io.FileNotFoundException;

import java.io.UnsupportedEncodingException;

import java.util.Map.Entry;public class Grammar{  /*local vars-> params function-> global vars*/  private static LinkedHashMap < String, Object > localVars = new LinkedHashMap < String, Object > ();  private static LinkedHashMap < String, Object > funcParams = new LinkedHashMap < String, Object > ();  private static LinkedHashMap < String, Object > globalVars = new LinkedHashMap < String, Object > ();
  private static LinkedHashMap < String, Object > funcReturn = new LinkedHashMap < String, Object > ();
  //function name : return var name  private static LinkedHashMap < String, String > functions = new LinkedHashMap < String, String > ();
    private static ArrayList < String > order = new ArrayList < String > ();
  private static ArrayList < String > funcNames = new ArrayList < String > ();
  private static ArrayList < String > tempFuncParamsType = new ArrayList < String > ();  private static ArrayList <String > tempExprType=new ArrayList <String > ();
    private static String globalSignal, filename,errorMessage = "",indexArray="null", moduleName="";  private static Boolean globalVar = false, funcParam = false, localVar = false, error = false,expr=false,stm=false,arraySize=false,size=false,arrayAccess=false;
  private static int localType = - 1, nArgs=0,aSize=-1;
  private static File teste;
  private static JVCgenerator gen;
    public static void main(String args []) throws FileNotFoundException,UnsupportedEncodingException  {    File f1 = new File("examples/teste5.txt");
	gen=new JVCgenerator("generated");
        if (f1.exists())    {      FileInputStream s1 = new FileInputStream(f1);      System.out.println("Reading file...");    }    else System.out.println("File not found.");    try    {      BufferedReader stream = new BufferedReader(new FileReader(f1));      Grammar myYal = new Grammar(stream);      SimpleNode root = myYal.Module();      root.dump("");      /* TESTING
      for (int i=0; i < order.size(); i++)
      	System.out.println("ORDER: "+order.get(i));

      System.out.println("ISTO: " + globalVars.get("g").getSize());
      System.out.println("ISTO: " + globalVars.get("g").getValue());      System.out.println("ISTO: " + globalVars.get("g").getType());
      
	  System.out.println("ISTO: " + globalVars.get("h").getSize());
      System.out.println("ISTO: " + globalVars.get("h").getValue());
      System.out.println("ISTO: " + globalVars.get("h").getType());

      System.out.println("ISTO: " + globalVars.get("b").getSize());
      System.out.println("ISTO: " + globalVars.get("b").getValue());
      System.out.println("ISTO: " + globalVars.get("b").getType());
      
      System.out.println("ISTO: " + globalVars.get("a").getSize());
      System.out.println("ISTO: " + globalVars.get("a").getValue());
      System.out.println("ISTO: " + globalVars.get("a").getType());
      
      System.out.println("ISTO: " + globalVars.get("c").getSize());
      System.out.println("ISTO: " + globalVars.get("c").getValue());
      System.out.println("ISTO: " + globalVars.get("c").getType());
      
      System.out.println("ISTO: " + globalVars.get("ab").getSize());
      System.out.println("ISTO: " + globalVars.get("ab").getValue());
      System.out.println("ISTO: " + globalVars.get("ab").getType());

      System.out.println("ISTO: " + globalVars.get("a").getSize());
      System.out.println("ISTO: " + globalVars.get("a").getValue());
      System.out.println("ISTO: " + localVars.get("p l").getValue());
      System.out.println("ISTO: " + globalVars.get("u").getValue());
      System.out.println("ISTO: " + globalVars.get("y").getValue());
      System.out.println("ISTO: " + localVars.get("p u").getValue());
	    System.out.println("ISTO: " + localVars.get("p y").getValue());
    
      System.out.println("ISTO: " + globalVars.get("g").getArray().get(3));
      */

	LinkedHashMap < String, Object > hash=filterFunc(funcParams,"p");

	for (Entry<String, Object> e : hash.entrySet()) {	
		System.out.println("ISTO: "+e.getKey());
  	}
 

      System.out.println("Accepted. " + myYal.eval(root));
      
    gen.closeWriter();
    Process p = Runtime.getRuntime().exec("java -jar ../jasmin.jar ../generated.j");
    p.waitFor();      /*JVCgenerator g1 = new JVCgenerator("teste");      g1.addModule("nomeModulo");      g1.addVar("variavel", "2");      g1.closeWriter();*/    }    catch (Exception e)    {      System.out.println("Error!");      System.out.println("MESSAGE: " + e.getMessage());    }  }  int eval(SimpleNode node)  {    if (node.jjtGetNumChildren() == 0)  // leaf node with integer value
    return node.val;    else if (node.jjtGetNumChildren() == 1)  // only one child
    return this.eval((SimpleNode) node.jjtGetChild(0));    SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
    SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
    switch (node.id)    {      case GrammarTreeConstants.JJTMODULE :       //PORQUE? TODO
      System.out.println(".class public ");      break;      default : // abort
      System.out.println("Operador ilegal!");      System.exit(1);    }    return 0;  }

   static LinkedHashMap < String, Object > filterFunc(LinkedHashMap < String, Object > hash,String func)
  {

          LinkedHashMap < String, Object > newHash=new LinkedHashMap < String, Object >();

          for (Entry<String, Object> e : hash.entrySet()) {
                if (e.getKey().startsWith(func)) {
                  Object ob1=hash.get(e.getKey());

                        newHash.put(e.getKey(),ob1);
                }
        }
        return newHash;
  }

  static int getIndex(LinkedHashMap<String,Object > hash, String key)  {
    int counter=0;
    
     for (Entry<String, Object> e : hash.entrySet())     {       
         if (e.getKey().equals(key))         {			System.out.println("index: " + counter + "value: " + e.getKey());
			break;
       }
                  
     counter ++;
   }

   return counter;

	
  }
  }PARSER_END(Grammar)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      "*"    | ~[ "*", "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < RELA_OP :    ">"  | "<"  | "<="  | ">="  | "=="  | "!=" >| < ADDSUB_OP :    "+"  | "-" >| < ARITH_OP :    "*"  | "/"  | "<<"  | ">>"  | ">>>" >| < BITWISE_OP :    "&"  | "|"  | "^" >| < NOT_OP : "!" >| < WHILE : "while" >| < IF : "if" >| < ELSE : "else" >| < ASSIGN : "=" >| < ASPA : "\"" >| < LPAR : "(" >| < RPAR : ")" >| < VIRG : "," >| < PVIRG : ";" >| < LCHAVETA : "{" >| < RCHAVETA : "}" >| < FUNCTION : "function" >| < MODULE : "module" >| < SIZE : "size" >}TOKEN : /* IDENTIFIERS */{  < INTEGER : (< DIGIT >)+ >| < ID :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >| < #DIGIT : [ "0"-"9" ] >| < STRING : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", ":", " ", "=" ])+ "\"" >}SimpleNode Module() :{  Token t1;}{  < MODULE > t1 = < ID >  {
    moduleName=(String) t1.image;
    gen.addModule(moduleName);    //jjtThis.module = (String) t1.image;    System.out.println("MODULE: " + t1.image);    globalVar = true;  }  #ID   < LCHAVETA > (Declaration() #Declaration)*(  Function() #Function)*< RCHAVETA >{  return jjtThis;}}
void Declaration() #void :{  Token t1, t2;}{

  {
    
  arraySize=false;
}  (
    LOOKAHEAD(3) ArrayAccess() #ArrayAccess  | ArrayElement() #Array  | ScalarElement() #Scalar)(  < ASSIGN >  (    (      "["       ArraySize() #ArraySize       "]"    )  |    (      (t1 = < ADDSUB_OP >)      {        if (globalVar == true)        {          String lastGlobal = order.get(order.size() - 1);          Object ob1 = globalVars.get(lastGlobal);          ob1.setOperator((String) t1.image);          globalVars.put(lastGlobal, ob1);        }else if (localVar == true)        {   		  String lastLocal = order.get(order.size() - 1);
   		  String lastFunc=funcNames.get(funcNames.size()-1);
   		  
          Object ob1 = localVars.get(lastFunc+" "+lastLocal);
          ob1.setOperator((String) t1.image);
          localVars.put(lastFunc+" "+lastLocal, ob1);
        }        System.out.println("operator: " + (String) t1.image);        // jjtThis.val2 = (String) t1.image; globalSignal = (String) t1.image;
      }      #AddSubOP    )?    (      t2 = < INTEGER >      {
        
        if (globalVar == true)        {          String lastGlobal = order.get(order.size() - 1);          Object ob1 = globalVars.get(lastGlobal);          if (!ob1.getSize().equals("null") && ob1.getType().equals("array"))          {
            if (!indexArray.equals("null"))
            {
            	ob1.setIndexValue(indexArray,(String) t2.image);
            	gen.saveArray(moduleName,lastGlobal);
            	gen.saveIndex(Integer.parseInt(indexArray));
            	gen.loadInt(Integer.parseInt((String) t2.image));
            	gen.saveToArray();            }else            {            if (ob1.getOperator().equals("-"))             ob1.setValue("-" + (String) t2.image);            else ob1.setValue((String) t2.image);            globalVars.put(lastGlobal, ob1);
          }          }          else if (ob1.getSize().equals("null") && ob1.getType().equals("array"))          {
          	ob1.setType("scalar");            if (ob1.getOperator().equals("-")) 
            ob1.setValue("-" + (String) t2.image);
            else ob1.setValue((String) t2.image);
            globalVars.put(lastGlobal, ob1);          }          else          {            if (ob1.getOperator().equals("-"))             ob1.setValue("-" + (String) t2.image);            else ob1.setValue((String) t2.image);            globalVars.put(lastGlobal, ob1);          }        }else if (localVar == true)
        {
          String lastGlobal = order.get(order.size() - 1);
          
          if (globalVars.containsKey(lastGlobal))          {
				//String lastGlobal = order.get(order.size() - 1);
          Object ob1 = globalVars.get(lastGlobal);
          if (!ob1.getSize().equals("null") && ob1.getType().equals("array"))
          {
            
            if (!indexArray.equals("null"))
            {
            	ob1.setIndexValue(indexArray,(String) t2.image);
            	
            }else
            {
            if (ob1.getOperator().equals("-")) 
            ob1.setValue("-" + (String) t2.image);
            else ob1.setValue((String) t2.image);
            globalVars.put(lastGlobal, ob1);
          }
          }
          else if (ob1.getSize().equals("null") && ob1.getType().equals("array"))
          {
          	ob1.setType("scalar");
            if (ob1.getOperator().equals("-")) 
            ob1.setValue("-" + (String) t2.image);
            else ob1.setValue((String) t2.image);
            globalVars.put(lastGlobal, ob1);
          }
          else
          {
            if (ob1.getOperator().equals("-")) 
            ob1.setValue("-" + (String) t2.image);
            else ob1.setValue((String) t2.image);
            globalVars.put(lastGlobal, ob1);
          }
			
                      }else          {            
          
		  String lastFunc=funcNames.get(funcNames.size()-1);
          String lastLocal = order.get(order.size() - 1);
          Object ob1 = localVars.get(lastFunc+" "+lastLocal);

          if (!ob1.getSize().equals("null") && ob1.getType().equals("array"))
          {
            
            
            if (!indexArray.equals("null"))
            {
            	ob1.setIndexValue(indexArray,(String) t2.image);  
            }else
            {
              
            
            if (ob1.getOperator().equals("-")) 
            ob1.setValue("-" + (String) t2.image);
            else ob1.setValue((String) t2.image);
            localVars.put(lastFunc+" "+lastLocal, ob1);
          }
          }
          else if (ob1.getSize().equals("null") && ob1.getType().equals("array"))
          {
          	ob1.setType("scalar");
            if (ob1.getOperator().equals("-")) 
            ob1.setValue("-" + (String) t2.image);
            else ob1.setValue((String) t2.image);
            localVars.put(lastFunc+" "+lastLocal, ob1);
          }
          else
          {
            if (ob1.getOperator().equals("-")) 
            ob1.setValue("-" + (String) t2.image);
            else ob1.setValue((String) t2.image);
            localVars.put(lastFunc+" "+lastLocal, ob1);
          }
        }
        }        System.out.println("Value: " + Integer.parseInt((String) t2.image));
        
        indexArray="null";

        gen.loadInt(Integer.parseInt((String)t2.image));
		
		String lastGlobal = order.get(order.size() - 1);
		
        if (globalVar == true)        	gen.saveToScalar(moduleName,lastGlobal);		else		{
		  String func=funcNames.get(funcNames.size()-1);
		  
		  LinkedHashMap < String, Object > hashParams=filterFunc(funcParams,func);
		  LinkedHashMap < String, Object > hashLocals=filterFunc(localVars,func);

		  int pos = hashParams.size() + getIndex(hashLocals,func + " " + lastGlobal);
		  
		  gen.saveToScalar(pos);

		}
        /*jjtThis.valorInicial = Integer.parseInt(globalSignal + (String) t2.image)*/              }      #IntValue)
    | (
      ScalarAccess() #ScalarAccess
    )  ))?
< PVIRG >}void Function() #function :{  Token t1;}{  {    globalVar = false;  }  (    LOOKAHEAD(3)    (      < FUNCTION >      (        functionReturn() #funcReturn)      < ASSIGN > t1 = < ID >      {        if (!functions.containsKey((String) t1.image))        {          String lastReturn = order.get(order.size() - 1);          String returnName = funcReturn.get(lastReturn).getName();          functions.put((String) t1.image, returnName);          order.add((String) t1.image);
          funcNames.add((String) t1.image);        }        else        {          error = true;          errorMessage = "Functions with same name: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }        System.out.println("func assign id: " + (String) t1.image);      }      < LPAR >      (        Varlist() #VarList)?      < RPAR >    )  |    (      < FUNCTION > t1 = < ID >      {        if (!functions.containsKey((String) t1.image))        {          String lastReturn = order.get(order.size() - 1);          functions.put((String) t1.image, "null");          order.add((String) t1.image);
          funcNames.add((String) t1.image);        }        else        {          error = true;          errorMessage = "Functions with same name: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }        System.out.println("func id: " + (String) t1.image);      }      < LPAR >      (        Varlist() #VarList)?      < RPAR >    )  )  {    funcParam = false;  }  < LCHAVETA > Stmtlst() #StmtLst < RCHAVETA >}void functionReturn() #void :{  Token t1;}{  (    t1 = < ID >    {      System.out.println("Func return id: " + (String) t1.image);      //jjtThis.nameF = (String) t1.image; name_f1 = (String) t1.image;
      if (!funcReturn.containsKey((String) t1.image))      {        Object ob1 = new Object((String) t1.image, "scalar", "null");        funcReturn.put((String) t1.image, ob1);        order.add((String) t1.image);      }      else      {        error = true;        errorMessage = "Function: Return var with same id: " + (String) t1.image;        System.out.println("ERROR: " + errorMessage);        System.exit(1);      }    }    #ID)  (    "[" "]"    {      String lastReturn = order.get(order.size() - 1);      Object ob1 = funcReturn.get(lastReturn);      ob1.setType("array");      funcReturn.put(lastReturn, ob1);      System.out.println("Func return type: ARRAY");    }  )?}void Varlist() #void :{}{  {    funcParam = true;  }  (    ArrayElement() #Array  | ScalarElement() #Scalar)(  < VIRG >  (    ArrayElement() #Array  | ScalarElement() #Scalar))*}void ArrayElement() #void :{  Token t1;}{
  {    
  if (expr == true)
  	return;}
  (    t1 = < ID >    {      if (globalVar == true)      {        if (!globalVars.containsKey((String) t1.image))        {          Object ob1 = new Object((String) t1.image, "array", "null");          globalVars.put((String) t1.image, ob1);          order.add((String) t1.image);        }        else        {          error = true;          errorMessage = "Array: Global var with same name: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }      }      else if (funcParam == true)      {        String lastFunc = order.get(order.size() - 1);        if (!funcParams.containsKey(lastFunc + " " + (String) t1.image))        {          Object ob1 = new Object((String) t1.image, "array", "null");          funcParams.put(lastFunc + " " + (String) t1.image, ob1);          System.out.println("Array: Func param id: " + (String) t1.image);          //order.add((String) t1.image);
        }        else        {          error = true;          errorMessage = "Array: Function param with same id: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }      }else if (localVar == true)
      {
        if (funcParams.containsKey((String) t1.image))
        {			error = true;
          errorMessage = "Array: Function param with same id: " + (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);
        }
        
        if (!localVars.containsKey((String) t1.image))
        {
          Object ob1 = new Object((String) t1.image, "array", "null");
          String func=funcNames.get(funcNames.size()-1);
          localVars.put(func+" "+(String) t1.image, ob1);
          order.add((String) t1.image);
        }
        else
        {
          error = true;
          errorMessage = "Array: Local var with same id: " + (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);
        }
      }      System.out.println("array id: " + (String) t1.image);    }    #ID)  ("[" "]"  )}void ScalarElement() #void :{  Token t1;}{
    {
    
  if (expr == true)
  	return;
}  (    t1 = < ID >    {
            if (globalVar == true)      {        if (!globalVars.containsKey((String) t1.image))        {          Object ob1 = new Object((String) t1.image, "scalar", "null");          globalVars.put((String) t1.image, ob1);          order.add((String) t1.image);        }        else        {         /* Object ob1 = globalVars.get((String) t1.image);          if (ob1.getType().equals("scalar"))          {            error = true;            errorMessage = "Scalar: Global var with same name: " + (String) t1.image;            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }*/
                    order.add((String) t1.image);        }      }      if (funcParam == true)      {        String lastFunc = order.get(order.size() - 1);        if (!funcParams.containsKey(lastFunc + " " + (String) t1.image))        {          Object ob1 = new Object((String) t1.image, "scalar", "null");          funcParams.put(lastFunc + " " + (String) t1.image, ob1);          System.out.println("Scalar: Func param id: " + (String) t1.image);          //order.add((String) t1.image);
        }        else        {          error = true;          errorMessage = "Scalar: Function param with same id: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }      }
		
      if (localVar == true && funcParam == false)
      {

		String lastFunc=funcNames.get(funcNames.size()-1);
		
        if (funcParams.containsKey(lastFunc+" "+(String) t1.image))
        {
			error = true;
          errorMessage = "Scalar: Function param with same id: " +" "+funcParam+" "+ (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);
        }
        
        if (!localVars.containsKey((String) t1.image))
        {
          Object ob1 = new Object((String) t1.image, "scalar", "null");
          String func=funcNames.get(funcNames.size()-1);
          localVars.put(func+" "+(String) t1.image, ob1);
          order.add((String) t1.image);
           System.out.println("Scalar: func local id: " + (String) t1.image);
           
        }
        else
        {
         /* Object ob1 = globalVars.get((String) t1.image);
          if (ob1.getType().equals("scalar"))
          {
            error = true;
            errorMessage = "Scalar: Global var with same name: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }*/
          
          order.add((String) t1.image);
        }
      }
            System.out.println("Scalar id: " + (String) t1.image);    }
    #ID)}void Stmtlst() #void :{}{
  {
    expr=false;  }  (    Stmt() #Stmt)*}void Stmt() #void :{}{
  {	stm=true;
  }  While()  #WHILE| If() #IF
| LOOKAHEAD(3)(
{
  localVar=true;
}
Declaration() #DECLARATION)| LOOKAHEAD(3)(  Assign() #ASSIGN)| Call() #CALL
< PVIRG >}void Assign() #assign :{}{
  {
    localVar=true;  }
    Lhs() #Lhs < ASSIGN > Rhs() #Rhs < PVIRG >

  {    localVar=false;
  }}void Lhs() #void :{}{  (    ArrayAccess() #ArrayAccess  | ScalarAccess() #ScalarAccess)}void Rhs() #void :{  Token t1;}{  (    (Term() #Term)    (      (t1 = < ARITH_OP > #ARITHOP      | t1 = < BITWISE_OP > #BITWISEOP      | t1 = < ADDSUB_OP > #ADDSUBOP)      (Term() #Term) )?  )  | ("[" ArraySize() #ArraySize "]"
{
  if (expr == true)  {
    tempExprType.add("array");  }}
  )}void ArraySize():{  Token t1;}
{    {
    arraySize=true;
	//System.out.println("arrayACESS");
   // if (arrayAccess == true)
    //	return;
  }
  
  (    (      ScalarAccess() #ScalarAccess    )  | t1 = < INTEGER >    {      if (globalVar == true)      {        String lastGlobal = order.get(order.size() - 1);        Object ob1 = globalVars.get(lastGlobal);        ob1.setSize((String) t1.image);
        ob1.setType("array");        globalVars.put(lastGlobal, ob1);      }else if (localVar == true)
      {
        
        String lastLocal = order.get(order.size() - 1);
        String lastFunc=funcNames.get(funcNames.size()-1);
      
        Object ob1 = localVars.get(lastFunc+" "+lastLocal);
        ob1.setSize((String) t1.image);
        ob1.setType("array");
        globalVars.put(lastLocal, ob1);
      }
            System.out.println("array size: " + (String) t1.image);      /*jjtThis.arraysize = Integer.parseInt((String)t1.image);*/    }    #Int)}void Term() #void :{  Token t1, t2;}{  (t1 = < ADDSUB_OP > #AddSubOP)?  ((t2 = < INTEGER > #Integer  {
    if (expr == true)
    {		tempExprType.add("scalar");
    }  })  |LOOKAHEAD(3) (Call() #Call)  |ArrayAccess() #ArrayAccess     |ScalarAccess() #ScalarAccess)
  
 }void While() :{}{
  {
    localType = 0;
  }  < WHILE > #While Exprtest() #Exprtest < LCHAVETA > Stmtlst() #Stmtlst < RCHAVETA >}void If():{}{
  {
    localType = 0;
  }  < IF > #If Exprtest() #Exprtest < LCHAVETA > Stmtlst() #Stmtlst < RCHAVETA > (< ELSE > #Else < LCHAVETA > Stmtlst() #Stmtlst < RCHAVETA >)?}void Exprtest() #void :{  Token t1;}{
  {
    expr=true;
  }  < LPAR > Lhs() #Lhs   t1 = < RELA_OP >  {  /*jjtThis.operation = (String) t1.image;*/  }  #WhileOP   Rhs() #Rhs < RPAR >

  {
    //TODO	for (int i=0; i < tempExprType.size(); i++)
		System.out.println("CHECK THIS OUT: "+tempExprType.get(i));

	tempExprType.clear();
  }}void Call() #void :
{
  Token t1;}{  t1=<ID> ("." <ID>)?  {
    if (!functions.containsKey((String) t1.image))
    	{
    	    error = true;
            errorMessage = "Call: Missplaced or nonexistent function call: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);    	}

	if (expr == true)	{	  String returnF=functions.get((String) t1.image);
	  
    if(!funcReturn.containsKey(returnF))    {			error = true;
            errorMessage = "Expr: return void function call: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
    }else    {
      	String type=funcReturn.get(returnF).getType();		tempExprType.add(type);
    }
  }
    
    order.add((String) t1.image);  }
   <LPAR>  (ArgumentList() #ArgumentList)?  <RPAR>
  {	System.out.println("NARGS: "+nArgs);
  }}void ArgumentList() #void :{}{

{
  String lastFunc=order.get(order.size() - 1);
  for (Entry<String, Object> e : funcParams.entrySet()) {	
		if (e.getKey().startsWith(lastFunc)) {
		  	Object ob1=funcParams.get(e.getKey());
			tempFuncParamsType.add(0,ob1.getType());
   			//System.out.println("CHECK : "+ob1.getType());
  		}
	}
	Collections.reverse(tempFuncParamsType);
	/*for(int i=0; i < tempFuncParamsType.size();i++)
		System.out.println("NOW LOOK: "+tempFuncParamsType.get(i));*/
}
  Argument()  {
    nArgs++;  }
    (    < VIRG > Argument()    {
      nArgs++;    } #Argument)*
    {
      if (nArgs != tempFuncParamsType.size())      {
        	  error = true;
              errorMessage = "Call: Invalid number of parameters: " + nArgs+" should be: "+tempFuncParamsType.size();
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);      }		nArgs=0;
		tempFuncParamsType.clear();
    }}

void Argument() #void :{  Token t1, t2, t3;}{
{  
   if (nArgs == tempFuncParamsType.size())
      {
        	  error = true;
        	  nArgs++;
              errorMessage = "Call: Invalid number of parameters: " + nArgs+" should be at max: "+tempFuncParamsType.size();
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
      }
    }
        ( t1 = < ID > #ID  {
    if (localType == 0)
    {
      if (!localVars.containsKey((String) t1.image))
      {
        if (!funcParams.containsKey((String) t1.image))
        {
          if (!globalVars.containsKey((String) t1.image))
          {
            error = true;
            errorMessage = "Call: Invalid param id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          else
          {
            if (!globalVars.get((String) t1.image).getType().equals(tempFuncParamsType.get(nArgs)))
            {
              String type1=globalVars.get((String) t1.image).getType();
              String type2=tempFuncParamsType.get(nArgs);
              error = true;

              System.out.println(tempFuncParamsType);
              
              errorMessage = "Call: Invalid param("+nArgs+") id type: " +type1+" should be: "+type2;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
          }
        }
        else
        {
          if (!funcParams.get((String) t1.image).getType().equals(tempFuncParamsType.get(nArgs)))
            {
              String type1=funcParams.get((String) t1.image).getType();
              String type2=tempFuncParamsType.get(nArgs);
              error = true;
             errorMessage = "Call: Invalid param("+nArgs+") id type: " + type1+" should be: "+type2;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
        }
      }
      else
      {
          if (!localVars.get((String) t1.image).getType().equals(tempFuncParamsType.get(nArgs)))
            {
              String type1=localVars.get((String) t1.image).getType();
              String type2=tempFuncParamsType.get(nArgs);
              error = true;
              errorMessage = "Call: Invalid param("+nArgs+") id type: " + type1+" should be: "+type2;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
      }
    }  }  | t2 = < STRING > #STRING  { System.out.println((String) t2.image);
      
  }  | t3 = < INTEGER > #INTEGER
  {
     System.out.println("INTEGER: "+(String) t3.image);
      
    if (!tempFuncParamsType.get(nArgs).equals("scalar"))
    {
              String type1=tempFuncParamsType.get(nArgs);
              error = true;
              errorMessage = "Call: Invalid param("+nArgs+") id type: scalar should be: "+type1;
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
    }  })}void ArrayAccess() #void :{  Token t1;}{  t1 = < ID >  {
    arrayAccess=true;

   /* if (globalVar == true)    {
    	if (!globalVars.containsKey((String) t1.image))
      	{
      	    error = true;
            errorMessage = "ArrayAccess: Invalid array id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
      	}else      	{			order.add((String) t1.image);
      	}    }*/
        if (localType == 0 || globalVar == true || localVar == true)    {      if (!localVars.containsKey((String) t1.image))      {        if (!funcParams.containsKey((String) t1.image))        {          if (!globalVars.containsKey((String) t1.image))          {            error = true;            errorMessage = "Params: ArrayAccess: Invalid array id: " + (String) t1.image;            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }          else          {            if (globalVars.get((String) t1.image).getSize().equals("null"))            {              error = true;              errorMessage = "Params: ArrayAccess: Uninitialized array id: " + (String) t1.image;              System.out.println("ERROR: " + errorMessage);              System.exit(1);            }
            order.add((String) t1.image);
            
			Object ob1=globalVars.get((String) t1.image);
            aSize=Integer.parseInt(ob1.getSize());          }        }        else        {          if (funcParams.get((String) t1.image).getSize().equals("null"))          {            error = true;            errorMessage = "Params: ArrayAccess: Uninitialized array id: " + (String) t1.image;            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }
          order.add((String) t1.image);
          Object ob1=funcParams.get((String) t1.image);
            aSize=Integer.parseInt(ob1.getSize());        }      }      else      {        if (localVars.get((String) t1.image).getSize().equals("null"))        {          error = true;          errorMessage = "Params: ArrayAccess: Uninitialized array id: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }
        order.add((String) t1.image);
        Object ob1=localVars.get((String) t1.image);
        aSize=Integer.parseInt(ob1.getSize());      }    }  }  "[" Index() #Index "]"
  {	if (expr == true)
  {
    tempExprType.add("array");
  }
  
  	if (stm == true)
  		order.add((String) t1.image);

  	arrayAccess=false;
  }}void ScalarAccess() #void :{  Token t1;}
{
    t1 = < ID >  (    "."    (      < SIZE >      {
        size=true;
                System.out.println("scalarAccess id: " + (String) t1.image);        if (globalVar == true)        {          if (!globalVars.containsKey((String) t1.image))          {            error = true;            errorMessage = "ScalarAccess: Invalid var.size: " + (String) t1.image;            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }          String lastGlobal = order.get(order.size() - 1);          Object ob1 = globalVars.get((String) t1.image);          Object ob2 = globalVars.get(lastGlobal);

          if (!ob1.getType().equals("array"))          {
            error = true;
            errorMessage = "ScalarAccess: Invalid var type. Must be array type. Current is: "+ ob1.getType();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);          }          if (ob1.getSize().equals("null"))          {            error = true;            errorMessage = "ScalarAccess: Invalid var.size: " + (String) t1.image + "." + ob1.getValue();            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }
          if (arraySize == true)          {            ob2.setType("array");			ob2.setSize(ob1.getSize());
		  }else		  {		    ob2.setValue(ob1.getSize());
		  }
		  
          globalVars.put(lastGlobal, ob2);        }        else if (localType == 0)        {          if (!localVars.containsKey((String) t1.image))           if (!funcParams.containsKey((String) t1.image))           if (!globalVars.containsKey((String) t1.image))          {            error = true;            errorMessage = "Params: ScalarAccess: Invalid var.size: " + (String) t1.image;            System.out.println("ERROR: " + errorMessage);            System.exit(1);          }        }
      }      #size)  )?

	{

	  {
		System.out.println(size+" "+globalVar+" "+localVar);
	  }
	  
	  if (size == false)
	  {
	if (globalVar == true)
        {
          if (!globalVars.containsKey((String) t1.image))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid scalar id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
 			String lastGlobal = order.get(order.size() - 1);
            Object ob1 = globalVars.get((String) t1.image);
            Object ob2 = globalVars.get(lastGlobal);

          	if (!ob1.getType().equals("scalar"))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid var type. Must be scalar typeFF. Current is: "+ ob1.getType();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          if (ob1.getValue().equals("null"))
          {
            error = true;
            errorMessage = "ScalarAccess: Uninitialized var: " + ob1.getName() +"; value: "+ ob1.getValue();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }

          if (arraySize == true)          {            ob2.setSize(ob1.getValue());
          	ob2.setType("array");
         }
		else		{		  ob2.setValue(ob1.getValue());
		  
		 	//String func=funcNames.get(funcNames.size()-1);
		  	lastGlobal = order.get(order.size() - 1);
		  	/*LinkedHashMap < String, Object > hashParams=filterFunc(funcParams,func);
		  	LinkedHashMap < String, Object > hashLocals=filterFunc(localVars,func);

		  	int pos = hashParams.size() + (hashLocals.size() - (getIndex(hashLocals,lastGlobal)+1));*/
		    gen.loadScalar(moduleName, (String)t1.image);
		    gen.saveToScalar(moduleName, lastGlobal);
		}
		
          globalVars.put(lastGlobal, ob2);
        
          
        }else if (localVar == true && expr == false)
        {
			String lastFunc=funcNames.get(funcNames.size()-1);
			System.out.println(lastFunc+" "+(String) t1.image);
			
          if (!localVars.containsKey(lastFunc+" "+(String) t1.image))
          {            
          if (!globalVars.containsKey((String) t1.image))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid scalar id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }

			

 			String lastLocal = order.get(order.size() - 1);
            Object ob1 = globalVars.get((String) t1.image);
            Object ob2 = localVars.get(lastFunc+" "+lastLocal);

			System.out.println(lastLocal+" "+(String) t1.image);
			
          	if (!ob1.getType().equals("scalar"))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid var type. Must be scalar type. Current is: "+ ob1.getType();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          if (ob1.getValue().equals("null"))
          {
            error = true;
            errorMessage = "ScalarAccess: Uninitialized var: " + ob1.getName() +"; value: "+ ob1.getValue();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          ob2.setSize(ob1.getValue());

          if (arraySize == true)
          	ob2.setType("array");

          globalVars.put(lastLocal, ob2);
          
        }else	        {				String lastLocal = order.get(order.size() - 1);
				System.out.println("GGGGGG: "+lastLocal);
				String func=funcNames.get(funcNames.size()-1);
				
	            Object ob1 = localVars.get(func+" "+(String) t1.image);
	            Object ob2 = localVars.get(func+" "+lastLocal);
	
	          	if (!ob1.getType().equals("scalar"))
	          {
	            error = true;
	            errorMessage = "ScalarAccess: Invalid var type. Must be scalar type. Current is: "+ ob1.getType();
	            System.out.println("ERROR: " + errorMessage);
	            System.exit(1);
	          }
	          if (ob1.getValue().equals("null"))
	          {
	            error = true;
	            errorMessage = "ScalarAccess: Uninitialized var: " + ob1.getName() +"; value: "+ ob1.getValue();
	            System.out.println("ERROR: " + errorMessage);
	            System.exit(1);
	          }
	
	          if (arraySize == true)
	          {
	            ob2.setSize(ob1.getValue());
	          	ob2.setType("array");
	         }
			else
			{
			  ob2.setValue(ob1.getValue());
			  
			 	func=funcNames.get(funcNames.size()-1);
			  	String lastGlobal = order.get(order.size() - 1);
			  	LinkedHashMap < String, Object > hashParams=filterFunc(funcParams,func);
			  	LinkedHashMap < String, Object > hashLocals=filterFunc(localVars,func);

				int posToStore = hashParams.size() + getIndex(hashLocals,func + " " + lastGlobal);
			  	int posToLoad = hashParams.size() + getIndex(hashLocals,func+" "+(String)t1.image);
			    gen.loadScalar(posToLoad);
			    gen.saveToScalar(posToStore);
			}
			
	          globalVars.put(lastLocal, ob2);
	        
	          
	

        }
        
        
      }/*else      {
        String lastFunc=funcNames.get(funcNames.size()-1);
        			String lastLocal = order.get(order.size() - 1);
            Object ob1 = localVars.get(lastFunc+" "+(String) t1.image);
            Object ob2 = localVars.get(lastFunc+" "+lastLocal);

          	if (!ob1.getType().equals("scalar"))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid var type. Must be scalar type. Current is: "+ ob1.getType();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          if (ob1.getValue().equals("null"))
          {
            error = true;
            errorMessage = "ScalarAccess: Uninitialized var: " + ob1.getName() +"; value: "+ ob1.getValue();
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          ob2.setSize(ob1.getValue());

          if (arraySize == true)
          	ob2.setType("array");

          localVars.put(lastFunc+" "+lastLocal, ob2);
      }*/
  }	}
  {	if (expr == true)	{
	  if (!localVars.containsKey((String) t1.image))
      {
        if (!funcParams.containsKey((String) t1.image))
        {
          if (!globalVars.containsKey((String) t1.image))
          {
            error = true;
            errorMessage = "ScalarAccess: Invalid id: " + (String) t1.image;
            System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
          else
          {
            if (!globalVars.get((String) t1.image).getType().equals("scalar"))
            {
              String type=globalVars.get((String) t1.image).getType();
              error = true;
              errorMessage = "ScalarAccess: Invalid scalar id: " + (String) t1.image+"; type: "+type+" should be: scalar";
              System.out.println("ERROR: " + errorMessage);
              System.exit(1);
            }
          }
        }
        else
        {
          if (!funcParams.get((String) t1.image).getType().equals("scalar"))
          {
             String type=funcParams.get((String) t1.image).getType();
            error = true;
            errorMessage = "ScalarAccess: Invalid scalar id: " + (String) t1.image+"; type: "+type+" should be: scalar";
              System.out.println("ERROR: " + errorMessage);
            System.exit(1);
          }
        }
      }
      else
      {
        if (!localVars.get((String) t1.image).getType().equals("scalar"))
        {
          String type=localVars.get((String) t1.image).getType();
            error = true;
            errorMessage = "ScalarAccess: Invalid scalar id: " + (String) t1.image+"; type: "+type+" should be: scalar";
              System.out.println("ERROR: " + errorMessage);
             System.exit(1);
        }
      }
         
	  tempExprType.add("scalar");	}

	if (stm == true)
		order.add((String) t1.image);

		
        size=false;
  }}void Index() #void :{  Token t1;}{  (    t1 = < ID >    {

      String lastGlobal=order.get(order.size()-1);
            if (localType == 0 || globalVar == true)      {        if (!localVars.containsKey((String) t1.image))        {                  if (!funcParams.containsKey((String) t1.image))        {                  if (!globalVars.containsKey((String) t1.image))        {          error = true;          errorMessage = "Params: index : Invalid scalar id: " + (String) t1.image;          System.out.println("ERROR: " + errorMessage);          System.exit(1);        }else        {
          	Object ob1=globalVars.get((String) t1.image);

          	if (!ob1.getType().equals("scalar"))          	{				error = true;
		          errorMessage = "Params: index : Invalid type id: must be scalar; Current: " + ob1.getType();
		          System.out.println("ERROR: " + errorMessage);
		          System.exit(1);
          	}
			if(Integer.parseInt(ob1.getValue()) >= 0 && Integer.parseInt(ob1.getValue()) < aSize)
	     		indexArray=ob1.getValue();
	     	else
	     	{
	     	  error = true;
	          errorMessage = "ArrayAccess: Invalid index: must be > 0 and < "+aSize+"; Current: " + ob1.getValue();
	          System.out.println("ERROR: " + errorMessage);
	          System.exit(1);
	     	}        }
      }else {
          	Object ob1=funcParams.get((String) t1.image);

          	if (!ob1.getType().equals("scalar"))
          	{
				error = true;
		          errorMessage = "Params: index : Invalid type id: must be scalar; Current: " + ob1.getType();
		          System.out.println("ERROR: " + errorMessage);
		          System.exit(1);
          	}

			if(Integer.parseInt(ob1.getValue()) >= 0 && Integer.parseInt(ob1.getValue()) < aSize)
	     		indexArray=ob1.getValue();
	     	else
	     	{
	     	  error = true;
	          errorMessage = "ArrayAccess: Invalid index: must be > 0 and < "+aSize+"; Current: " + ob1.getValue();
	          System.out.println("ERROR: " + errorMessage);
	          System.exit(1);
	     	}
        }
      }      /*jjtThis.Indice = (String) t1.image;*/    }else {
          	Object ob1=localVars.get((String) t1.image);

          	if (!ob1.getType().equals("scalar"))
          	{
				error = true;
		          errorMessage = "Params: index : Invalid type id: must be scalar; Current: " + ob1.getType();
		          System.out.println("ERROR: " + errorMessage);
		          System.exit(1);
          	}

			if(Integer.parseInt(ob1.getValue()) >= 0 && Integer.parseInt(ob1.getValue()) < aSize)
	     		indexArray=ob1.getValue();
	     	else
	     	{
	     	  error = true;
	          errorMessage = "ArrayAccess: Invalid index: must be > 0 and < "+aSize+"; Current: " + ob1.getValue();
	          System.out.println("ERROR: " + errorMessage);
	          System.exit(1);
	     	}
        }
  }    #ID)|  (    t1 = < INTEGER >    {
      	if(Integer.parseInt((String) t1.image) >= 0 && Integer.parseInt((String) t1.image) < aSize)
	     		indexArray=(String) t1.image;
     	else     	{
     	  error = true;
          errorMessage = "ArrayAccess: Invalid index: must be > 0 and < "+aSize+"; Current: " + (String) t1.image;
          System.out.println("ERROR: " + errorMessage);
          System.exit(1);     	}    }    #Integer)
    {		aSize=-1;
    }}
